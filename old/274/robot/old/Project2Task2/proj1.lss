
proj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000005e6  0000067a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  00800108  00800108  00000682  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000684  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000cbe  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000462  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002f8  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  00002258  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000327  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002e1  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 33 01 	jmp	0x266	; 0x266 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 34       	cpi	r26, 0x49	; 73
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3b 02 	call	0x476	; 0x476 <main>
  9e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <stop>:
		}
	}
}

void stop(void) {
byteTx(CmdDriveWheels);
  a6:	81 e9       	ldi	r24, 0x91	; 145
  a8:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
byteTx(0x00);//velocity right wheel 300mm/s
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
byteTx(0x00);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
byteTx(0x00);//velocity left wheel 300mm/s
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
byteTx(0x00);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0c 94 c3 01 	jmp	0x386	; 0x386 <byteTx>

000000c4 <printBuffer>:
}

void printBuffer(char buf[]) {
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	int i;
	for(i = 0; i < strlen(buf); i++) {
  ce:	8c 01       	movw	r16, r24
  d0:	fe 01       	movw	r30, r28
  d2:	01 90       	ld	r0, Z+
  d4:	00 20       	and	r0, r0
  d6:	e9 f7       	brne	.-6      	; 0xd2 <printBuffer+0xe>
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	ec 1b       	sub	r30, r28
  dc:	fd 0b       	sbc	r31, r29
  de:	c8 01       	movw	r24, r16
  e0:	8c 1b       	sub	r24, r28
  e2:	9d 0b       	sbc	r25, r29
  e4:	8e 17       	cp	r24, r30
  e6:	9f 07       	cpc	r25, r31
  e8:	30 f4       	brcc	.+12     	; 0xf6 <printBuffer+0x32>
		byteTx(buf[i]);
  ea:	f8 01       	movw	r30, r16
  ec:	81 91       	ld	r24, Z+
  ee:	8f 01       	movw	r16, r30
  f0:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
  f4:	ed cf       	rjmp	.-38     	; 0xd0 <printBuffer+0xc>
	    }
	}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	08 95       	ret

00000100 <rotateDegreeRight>:
		}
	}
*/
	void rotateDegreeRight(int right){
		int rotateDelayMs = 30*16;//gives proper degree at 30cm/s
		safe=0;
 100:	10 92 0a 01 	sts	0x010A, r1
		isRotating=1;
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	20 93 08 01 	sts	0x0108, r18
		if(right==1){//if turning right
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	71 f4       	brne	.+28     	; 0x12a <rotateDegreeRight+0x2a>
			byteTx(CmdDriveWheels);
 10e:	81 e9       	ldi	r24, 0x91	; 145
 110:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0xfe);//velocity right wheel -300mm/s
 114:	8e ef       	ldi	r24, 0xFE	; 254
 116:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0xd4);
 11a:	84 ed       	ldi	r24, 0xD4	; 212
 11c:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x01);//velocity left wheel 300mm/s
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x2c);
 126:	8c e2       	ldi	r24, 0x2C	; 44
 128:	0d c0       	rjmp	.+26     	; 0x144 <rotateDegreeRight+0x44>
			//checkSensor();
		}
		else{//if turning left
			byteTx(CmdDriveWheels);
 12a:	81 e9       	ldi	r24, 0x91	; 145
 12c:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x01);//velocity right wheel 300mm/s  
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x2c);
 136:	8c e2       	ldi	r24, 0x2C	; 44
 138:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0xfe);//velocity left wheel -300mm/s
 13c:	8e ef       	ldi	r24, 0xFE	; 254
 13e:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0xd4);
 142:	84 ed       	ldi	r24, 0xD4	; 212
 144:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			//checkSensor();
		}
		delayMs(rotateDelayMs);
 148:	80 ee       	ldi	r24, 0xE0	; 224
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0c 94 95 01 	jmp	0x32a	; 0x32a <delayMs>

00000150 <driveStraightDistance>:
		isRotating==0;
	}

	void driveStraightDistance(void){
			byteTx(CmdDriveWheels);
 150:	81 e9       	ldi	r24, 0x91	; 145
 152:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x01);//velocity right wheel 300mm/s
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x2c);
 15c:	8c e2       	ldi	r24, 0x2C	; 44
 15e:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x01);//velocity left wheel 300mm/s
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(0x2c);
 168:	8c e2       	ldi	r24, 0x2C	; 44
 16a:	0c 94 c3 01 	jmp	0x386	; 0x386 <byteTx>

0000016e <defineSongs>:
 16e:	8c e8       	ldi	r24, 0x8C	; 140
 170:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 180:	8c e3       	ldi	r24, 0x3C	; 60
 182:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 18c:	88 e4       	ldi	r24, 0x48	; 72
 18e:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 198:	84 e5       	ldi	r24, 0x54	; 84
 19a:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 19e:	86 e0       	ldi	r24, 0x06	; 6
 1a0:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1a4:	80 e6       	ldi	r24, 0x60	; 96
 1a6:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1b0:	8c e8       	ldi	r24, 0x8C	; 140
 1b2:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1c2:	85 e4       	ldi	r24, 0x45	; 69
 1c4:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1c8:	82 e1       	ldi	r24, 0x12	; 18
 1ca:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1ce:	88 e4       	ldi	r24, 0x48	; 72
 1d0:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1da:	8a e4       	ldi	r24, 0x4A	; 74
 1dc:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1e6:	88 e4       	ldi	r24, 0x48	; 72
 1e8:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1f2:	85 e4       	ldi	r24, 0x45	; 69
 1f4:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1f8:	8c e0       	ldi	r24, 0x0C	; 12
 1fa:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 1fe:	8d e4       	ldi	r24, 0x4D	; 77
 200:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	0c 94 c3 01 	jmp	0x386	; 0x386 <byteTx>

0000020a <powerOnRobot>:
 20a:	1d 99       	sbic	0x03, 5	; 3
 20c:	12 c0       	rjmp	.+36     	; 0x232 <powerOnRobot+0x28>
 20e:	1d 99       	sbic	0x03, 5	; 3
 210:	0c c0       	rjmp	.+24     	; 0x22a <powerOnRobot+0x20>
 212:	5f 98       	cbi	0x0b, 7	; 11
 214:	84 ef       	ldi	r24, 0xF4	; 244
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
 21c:	5f 9a       	sbi	0x0b, 7	; 11
 21e:	84 e6       	ldi	r24, 0x64	; 100
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
 226:	5f 98       	cbi	0x0b, 7	; 11
 228:	f2 cf       	rjmp	.-28     	; 0x20e <powerOnRobot+0x4>
 22a:	8c ea       	ldi	r24, 0xAC	; 172
 22c:	9d e0       	ldi	r25, 0x0D	; 13
 22e:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
 232:	80 91 c0 00 	lds	r24, 0x00C0
 236:	87 ff       	sbrs	r24, 7
 238:	04 c0       	rjmp	.+8      	; 0x242 <powerOnRobot+0x38>
 23a:	80 91 c6 00 	lds	r24, 0x00C6
 23e:	81 11       	cpse	r24, r1
 240:	f8 cf       	rjmp	.-16     	; 0x232 <powerOnRobot+0x28>
 242:	08 95       	ret

00000244 <powerOffRobot>:
 244:	1d 9b       	sbis	0x03, 5	; 3
 246:	08 95       	ret
 248:	1d 9b       	sbis	0x03, 5	; 3
 24a:	0c c0       	rjmp	.+24     	; 0x264 <powerOffRobot+0x20>
 24c:	5f 98       	cbi	0x0b, 7	; 11
 24e:	84 ef       	ldi	r24, 0xF4	; 244
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
 256:	5f 9a       	sbi	0x0b, 7	; 11
 258:	84 e6       	ldi	r24, 0x64	; 100
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
 260:	5f 98       	cbi	0x0b, 7	; 11
 262:	f2 cf       	rjmp	.-28     	; 0x248 <powerOffRobot+0x4>
 264:	08 95       	ret

00000266 <__vector_18>:
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_14>:
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	80 91 10 01 	lds	r24, 0x0110
 28c:	90 91 11 01 	lds	r25, 0x0111
 290:	89 2b       	or	r24, r25
 292:	51 f0       	breq	.+20     	; 0x2a8 <__vector_14+0x2e>
 294:	80 91 10 01 	lds	r24, 0x0110
 298:	90 91 11 01 	lds	r25, 0x0111
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	90 93 11 01 	sts	0x0111, r25
 2a2:	80 93 10 01 	sts	0x0110, r24
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__vector_14+0x32>
 2a8:	10 92 0f 01 	sts	0x010F, r1
 2ac:	80 91 06 01 	lds	r24, 0x0106
 2b0:	90 91 07 01 	lds	r25, 0x0107
 2b4:	89 2b       	or	r24, r25
 2b6:	51 f0       	breq	.+20     	; 0x2cc <__vector_14+0x52>
 2b8:	80 91 06 01 	lds	r24, 0x0106
 2bc:	90 91 07 01 	lds	r25, 0x0107
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	90 93 07 01 	sts	0x0107, r25
 2c6:	80 93 06 01 	sts	0x0106, r24
 2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <__vector_14+0x58>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 0d 01 	sts	0x010D, r24
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__vector_11>:
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 0e 01 	sts	0x010E, r24
 2f2:	8f 91       	pop	r24
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <setupTimer>:
 2fe:	22 e0       	ldi	r18, 0x02	; 2
 300:	24 bd       	out	0x24, r18	; 36
 302:	85 e0       	ldi	r24, 0x05	; 5
 304:	85 bd       	out	0x25, r24	; 37
 306:	81 e1       	ldi	r24, 0x11	; 17
 308:	87 bd       	out	0x27, r24	; 39
 30a:	20 93 6e 00 	sts	0x006E, r18
 30e:	10 92 80 00 	sts	0x0080, r1
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	80 93 81 00 	sts	0x0081, r24
 318:	8f e4       	ldi	r24, 0x4F	; 79
 31a:	96 e4       	ldi	r25, 0x46	; 70
 31c:	90 93 89 00 	sts	0x0089, r25
 320:	80 93 88 00 	sts	0x0088, r24
 324:	20 93 6f 00 	sts	0x006F, r18
 328:	08 95       	ret

0000032a <delayMs>:
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	20 93 0f 01 	sts	0x010F, r18
 330:	90 93 11 01 	sts	0x0111, r25
 334:	80 93 10 01 	sts	0x0110, r24
 338:	80 91 0f 01 	lds	r24, 0x010F
 33c:	81 11       	cpse	r24, r1
 33e:	fc cf       	rjmp	.-8      	; 0x338 <delayMs+0xe>
 340:	08 95       	ret

00000342 <setupIOPins>:
 342:	80 e1       	ldi	r24, 0x10	; 16
 344:	84 b9       	out	0x04, r24	; 4
 346:	8f ec       	ldi	r24, 0xCF	; 207
 348:	85 b9       	out	0x05, r24	; 5
 34a:	17 b8       	out	0x07, r1	; 7
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	88 b9       	out	0x08, r24	; 8
 350:	86 ee       	ldi	r24, 0xE6	; 230
 352:	8a b9       	out	0x0a, r24	; 10
 354:	8d e7       	ldi	r24, 0x7D	; 125
 356:	8b b9       	out	0x0b, r24	; 11
 358:	08 95       	ret

0000035a <setupSerialPort>:
 35a:	83 e1       	ldi	r24, 0x13	; 19
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	90 93 c5 00 	sts	0x00C5, r25
 362:	80 93 c4 00 	sts	0x00C4, r24
 366:	88 e9       	ldi	r24, 0x98	; 152
 368:	80 93 c1 00 	sts	0x00C1, r24
 36c:	86 e0       	ldi	r24, 0x06	; 6
 36e:	80 93 c2 00 	sts	0x00C2, r24
 372:	08 95       	ret

00000374 <initializeCommandModule>:
 374:	f8 94       	cli
 376:	0e 94 a1 01 	call	0x342	; 0x342 <setupIOPins>
 37a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <setupTimer>
 37e:	0e 94 ad 01 	call	0x35a	; 0x35a <setupSerialPort>
 382:	78 94       	sei
 384:	08 95       	ret

00000386 <byteTx>:
 386:	90 91 c0 00 	lds	r25, 0x00C0
 38a:	95 ff       	sbrs	r25, 5
 38c:	fc cf       	rjmp	.-8      	; 0x386 <byteTx>
 38e:	80 93 c6 00 	sts	0x00C6, r24
 392:	08 95       	ret

00000394 <byteRx>:
 394:	80 91 c0 00 	lds	r24, 0x00C0
 398:	87 ff       	sbrs	r24, 7
 39a:	fc cf       	rjmp	.-8      	; 0x394 <byteRx>
 39c:	80 91 c6 00 	lds	r24, 0x00C6
 3a0:	08 95       	ret

000003a2 <baud>:
 3a2:	cf 93       	push	r28
 3a4:	c8 2f       	mov	r28, r24
 3a6:	8c 30       	cpi	r24, 0x0C	; 12
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <baud+0xa>
 3aa:	53 c0       	rjmp	.+166    	; 0x452 <baud+0xb0>
 3ac:	81 e8       	ldi	r24, 0x81	; 129
 3ae:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 3b2:	80 91 c0 00 	lds	r24, 0x00C0
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	80 93 c0 00 	sts	0x00C0, r24
 3bc:	8c 2f       	mov	r24, r28
 3be:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 3c2:	80 91 c0 00 	lds	r24, 0x00C0
 3c6:	86 ff       	sbrs	r24, 6
 3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <baud+0x20>
 3ca:	f8 94       	cli
 3cc:	cb 30       	cpi	r28, 0x0B	; 11
 3ce:	19 f4       	brne	.+6      	; 0x3d6 <baud+0x34>
 3d0:	89 e0       	ldi	r24, 0x09	; 9
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	34 c0       	rjmp	.+104    	; 0x43e <baud+0x9c>
 3d6:	ca 30       	cpi	r28, 0x0A	; 10
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <baud+0x3e>
 3da:	83 e1       	ldi	r24, 0x13	; 19
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2f c0       	rjmp	.+94     	; 0x43e <baud+0x9c>
 3e0:	c9 30       	cpi	r28, 0x09	; 9
 3e2:	19 f4       	brne	.+6      	; 0x3ea <baud+0x48>
 3e4:	8d e1       	ldi	r24, 0x1D	; 29
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2a c0       	rjmp	.+84     	; 0x43e <baud+0x9c>
 3ea:	c8 30       	cpi	r28, 0x08	; 8
 3ec:	19 f4       	brne	.+6      	; 0x3f4 <baud+0x52>
 3ee:	87 e2       	ldi	r24, 0x27	; 39
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	25 c0       	rjmp	.+74     	; 0x43e <baud+0x9c>
 3f4:	c7 30       	cpi	r28, 0x07	; 7
 3f6:	19 f4       	brne	.+6      	; 0x3fe <baud+0x5c>
 3f8:	8b e3       	ldi	r24, 0x3B	; 59
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	20 c0       	rjmp	.+64     	; 0x43e <baud+0x9c>
 3fe:	c6 30       	cpi	r28, 0x06	; 6
 400:	19 f4       	brne	.+6      	; 0x408 <baud+0x66>
 402:	8f e4       	ldi	r24, 0x4F	; 79
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	1b c0       	rjmp	.+54     	; 0x43e <baud+0x9c>
 408:	c5 30       	cpi	r28, 0x05	; 5
 40a:	19 f4       	brne	.+6      	; 0x412 <baud+0x70>
 40c:	87 e7       	ldi	r24, 0x77	; 119
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	16 c0       	rjmp	.+44     	; 0x43e <baud+0x9c>
 412:	c4 30       	cpi	r28, 0x04	; 4
 414:	19 f4       	brne	.+6      	; 0x41c <baud+0x7a>
 416:	8f ee       	ldi	r24, 0xEF	; 239
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	11 c0       	rjmp	.+34     	; 0x43e <baud+0x9c>
 41c:	c3 30       	cpi	r28, 0x03	; 3
 41e:	19 f4       	brne	.+6      	; 0x426 <baud+0x84>
 420:	8f ed       	ldi	r24, 0xDF	; 223
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0c c0       	rjmp	.+24     	; 0x43e <baud+0x9c>
 426:	c2 30       	cpi	r28, 0x02	; 2
 428:	19 f4       	brne	.+6      	; 0x430 <baud+0x8e>
 42a:	8f eb       	ldi	r24, 0xBF	; 191
 42c:	93 e0       	ldi	r25, 0x03	; 3
 42e:	07 c0       	rjmp	.+14     	; 0x43e <baud+0x9c>
 430:	c1 30       	cpi	r28, 0x01	; 1
 432:	19 f4       	brne	.+6      	; 0x43a <baud+0x98>
 434:	8f e7       	ldi	r24, 0x7F	; 127
 436:	97 e0       	ldi	r25, 0x07	; 7
 438:	02 c0       	rjmp	.+4      	; 0x43e <baud+0x9c>
 43a:	8f ef       	ldi	r24, 0xFF	; 255
 43c:	9e e0       	ldi	r25, 0x0E	; 14
 43e:	90 93 c5 00 	sts	0x00C5, r25
 442:	80 93 c4 00 	sts	0x00C4, r24
 446:	78 94       	sei
 448:	84 e6       	ldi	r24, 0x64	; 100
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	cf 91       	pop	r28
 44e:	0c 94 95 01 	jmp	0x32a	; 0x32a <delayMs>
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <setSerialDestination>:
 456:	cf 93       	push	r28
 458:	c8 2f       	mov	r28, r24
 45a:	8a e0       	ldi	r24, 0x0A	; 10
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
 462:	c1 30       	cpi	r28, 0x01	; 1
 464:	11 f4       	brne	.+4      	; 0x46a <setSerialDestination+0x14>
 466:	2c 98       	cbi	0x05, 4	; 5
 468:	01 c0       	rjmp	.+2      	; 0x46c <setSerialDestination+0x16>
 46a:	2c 9a       	sbi	0x05, 4	; 5
 46c:	8a e0       	ldi	r24, 0x0A	; 10
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	cf 91       	pop	r28
 472:	0c 94 95 01 	jmp	0x32a	; 0x32a <delayMs>

00000476 <main>:
//void checkSensor(void);
void stop(void);

int main(void) {
	// Set up Create and module
	initializeCommandModule();
 476:	0e 94 ba 01 	call	0x374	; 0x374 <initializeCommandModule>

	powerOnRobot();
 47a:	0e 94 05 01 	call	0x20a	; 0x20a <powerOnRobot>
	// Is the Robot on
	byteTx(CmdStart);
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	// Start the create
	baud(Baud57600);
 484:	8a e0       	ldi	r24, 0x0A	; 10
 486:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <baud>
	// Set the baud rate for the Create and Command Module
	defineSongs();
 48a:	0e 94 b7 00 	call	0x16e	; 0x16e <defineSongs>
	// Define some songs so that we know the robot is on.
	byteTx(CmdControl);
 48e:	82 e8       	ldi	r24, 0x82	; 130
 490:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	// Deprecated form of safe mode. I use it because it will
	// turn of all LEDs, so it's essentially a reset.
	byteTx(CmdFull);
 494:	84 e8       	ldi	r24, 0x84	; 132
 496:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>

	// CSCE 274 students: I would make sure the robot stops. 
	//                    As a precaution for the robot and your grade.

	// Play the reset song and wait while it plays.
	byteTx(CmdPlay);
 49a:	8d e8       	ldi	r24, 0x8D	; 141
 49c:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	byteTx(RESET_SONG);
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	delayMs(750);
 4a6:	8e ee       	ldi	r24, 0xEE	; 238
 4a8:	92 e0       	ldi	r25, 0x02	; 2
 4aa:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>

	// Turn the power button on to something. I like red, but here is green.
	// CSCE 274 students: The following should (will) be a function that you write.
	byteTx(CmdLeds);
 4ae:	8b e8       	ldi	r24, 0x8B	; 139
 4b0:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	byteTx(0x00);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	byteTx(0);
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	byteTx(255);
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
	void leftLEDoff(void) {
		PORTD |= 0x40;
	}

	// Initialize global variables
	DELAY=1000;
 4c6:	88 ee       	ldi	r24, 0xE8	; 232
 4c8:	93 e0       	ldi	r25, 0x03	; 3
 4ca:	90 93 14 01 	sts	0x0114, r25
 4ce:	80 93 13 01 	sts	0x0113, r24
	notReadyBool=1;
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	80 93 12 01 	sts	0x0112, r24
			if(sensors[SenBumpDrop]==4 || sensors[SenBumpDrop]==8 || sensors[SenBumpDrop]==16 || sensors[SenBumpDrop]==28) {
				unsafeRotate=1; // wheel drop, cannot rotate
			}
			else unsafeRotate=0;
			//sei();
			senseTimerCount=100;
 4d8:	04 e6       	ldi	r16, 0x64	; 100
 4da:	10 e0       	ldi	r17, 0x00	; 0
			else if(sensors[SenBumpDrop]==1 || sensors[SenBumpDrop]==2 || sensors[SenBumpDrop]==3) {
		   		safe=1; // unsafe to drive
			}
			else safe=0; // safe case
			if(sensors[SenBumpDrop]==4 || sensors[SenBumpDrop]==8 || sensors[SenBumpDrop]==16 || sensors[SenBumpDrop]==28) {
				unsafeRotate=1; // wheel drop, cannot rotate
 4dc:	ff 24       	eor	r15, r15
 4de:	f3 94       	inc	r15
	byteTx(0);
	byteTx(255);

	// Methods
	void setupLEDs(void) {
		DDRD |= 0X60;
 4e0:	8a b1       	in	r24, 0x0a	; 10
 4e2:	80 66       	ori	r24, 0x60	; 96
 4e4:	8a b9       	out	0x0a, r24	; 10
	}

	// Infinite operation loop
	for(;;) {
		setupLEDs();
		if(canSense==1){
 4e6:	80 91 0d 01 	lds	r24, 0x010D
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <main+0x7a>
 4ee:	44 c0       	rjmp	.+136    	; 0x578 <__stack+0x79>
			//cli();
			uint8_t i=0;
			while(UCSR0A & 0x80)
 4f0:	80 91 c0 00 	lds	r24, 0x00C0
 4f4:	87 ff       	sbrs	r24, 7
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <main+0x88>
			i = UDR0;
 4f8:	80 91 c6 00 	lds	r24, 0x00C6
 4fc:	f9 cf       	rjmp	.-14     	; 0x4f0 <main+0x7a>
			byteTx(CmdSensors);  // sensor opcode 
 4fe:	8e e8       	ldi	r24, 0x8E	; 142
 500:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
			byteTx(6);   // send request for packet 0 
 504:	86 e0       	ldi	r24, 0x06	; 6
 506:	0e 94 c3 01 	call	0x386	; 0x386 <byteTx>
 50a:	c5 e1       	ldi	r28, 0x15	; 21
 50c:	d1 e0       	ldi	r29, 0x01	; 1
			for(uint8_t i = 0; i < Sen6Size; i++) { // read each sensor byte
			   sensors[i] = byteRx();
 50e:	0e 94 ca 01 	call	0x394	; 0x394 <byteRx>
 512:	89 93       	st	Y+, r24
			uint8_t i=0;
			while(UCSR0A & 0x80)
			i = UDR0;
			byteTx(CmdSensors);  // sensor opcode 
			byteTx(6);   // send request for packet 0 
			for(uint8_t i = 0; i < Sen6Size; i++) { // read each sensor byte
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	c9 34       	cpi	r28, 0x49	; 73
 518:	d8 07       	cpc	r29, r24
 51a:	c9 f7       	brne	.-14     	; 0x50e <__stack+0xf>
			   sensors[i] = byteRx();
			}
			if(sensors[SenCliffR]==1 || sensors[SenCliffFR]==1 || sensors[SenCliffL]==1 || sensors[SenCliffFL]==1) {
 51c:	90 91 1a 01 	lds	r25, 0x011A
 520:	80 91 15 01 	lds	r24, 0x0115
 524:	91 30       	cpi	r25, 0x01	; 1
 526:	61 f0       	breq	.+24     	; 0x540 <__stack+0x41>
 528:	90 91 19 01 	lds	r25, 0x0119
 52c:	91 30       	cpi	r25, 0x01	; 1
 52e:	41 f0       	breq	.+16     	; 0x540 <__stack+0x41>
 530:	90 91 17 01 	lds	r25, 0x0117
 534:	91 30       	cpi	r25, 0x01	; 1
 536:	21 f0       	breq	.+8      	; 0x540 <__stack+0x41>
 538:	90 91 18 01 	lds	r25, 0x0118
 53c:	91 30       	cpi	r25, 0x01	; 1
 53e:	19 f4       	brne	.+6      	; 0x546 <__stack+0x47>
		   		safe=1; // unsafe to drive
 540:	f0 92 0a 01 	sts	0x010A, r15
 544:	06 c0       	rjmp	.+12     	; 0x552 <__stack+0x53>
			}
			else if(sensors[SenBumpDrop]==1 || sensors[SenBumpDrop]==2 || sensors[SenBumpDrop]==3) {
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	98 0f       	add	r25, r24
 54a:	93 30       	cpi	r25, 0x03	; 3
 54c:	c8 f3       	brcs	.-14     	; 0x540 <__stack+0x41>
		   		safe=1; // unsafe to drive
			}
			else safe=0; // safe case
 54e:	10 92 0a 01 	sts	0x010A, r1
			if(sensors[SenBumpDrop]==4 || sensors[SenBumpDrop]==8 || sensors[SenBumpDrop]==16 || sensors[SenBumpDrop]==28) {
 552:	84 30       	cpi	r24, 0x04	; 4
 554:	31 f0       	breq	.+12     	; 0x562 <__stack+0x63>
 556:	88 30       	cpi	r24, 0x08	; 8
 558:	21 f0       	breq	.+8      	; 0x562 <__stack+0x63>
 55a:	80 31       	cpi	r24, 0x10	; 16
 55c:	11 f0       	breq	.+4      	; 0x562 <__stack+0x63>
 55e:	8c 31       	cpi	r24, 0x1C	; 28
 560:	19 f4       	brne	.+6      	; 0x568 <__stack+0x69>
				unsafeRotate=1; // wheel drop, cannot rotate
 562:	f0 92 09 01 	sts	0x0109, r15
 566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x6d>
			}
			else unsafeRotate=0;
 568:	10 92 09 01 	sts	0x0109, r1
			//sei();
			senseTimerCount=100;
 56c:	10 93 07 01 	sts	0x0107, r17
 570:	00 93 06 01 	sts	0x0106, r16
			canSense=0;
 574:	10 92 0d 01 	sts	0x010D, r1
		}

		
		if(isRotating==1 && unsafeRotate==1){//do jackShit
 578:	80 91 08 01 	lds	r24, 0x0108
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	21 f4       	brne	.+8      	; 0x588 <__stack+0x89>
 580:	80 91 09 01 	lds	r24, 0x0109
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	09 f1       	breq	.+66     	; 0x5ca <__stack+0xcb>
		}

		else if(sensors[SenIRChar]==130&&safe==0) { // forward
 588:	80 91 1f 01 	lds	r24, 0x011F
 58c:	82 38       	cpi	r24, 0x82	; 130
 58e:	39 f4       	brne	.+14     	; 0x59e <__stack+0x9f>
 590:	80 91 0a 01 	lds	r24, 0x010A
 594:	81 11       	cpse	r24, r1
 596:	17 c0       	rjmp	.+46     	; 0x5c6 <__stack+0xc7>
		driveStraightDistance();
 598:	0e 94 a8 00 	call	0x150	; 0x150 <driveStraightDistance>
 59c:	16 c0       	rjmp	.+44     	; 0x5ca <__stack+0xcb>
		}

		else if(sensors[SenIRChar]==131&&unsafeRotate==0) { // rotate right
 59e:	83 38       	cpi	r24, 0x83	; 131
 5a0:	39 f4       	brne	.+14     	; 0x5b0 <__stack+0xb1>
 5a2:	80 91 09 01 	lds	r24, 0x0109
 5a6:	81 11       	cpse	r24, r1
 5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <__stack+0xc7>
		rotateDegreeRight(1);
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	08 c0       	rjmp	.+16     	; 0x5c0 <__stack+0xc1>
		}

		else if(sensors[SenIRChar]==129&&unsafeRotate==0) { // rotate left
 5b0:	81 38       	cpi	r24, 0x81	; 129
 5b2:	49 f4       	brne	.+18     	; 0x5c6 <__stack+0xc7>
 5b4:	80 91 09 01 	lds	r24, 0x0109
 5b8:	81 11       	cpse	r24, r1
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__stack+0xc7>
		rotateDegreeRight(0);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 80 00 	call	0x100	; 0x100 <rotateDegreeRight>
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <__stack+0xcb>
		}

		else stop();
 5c6:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>

		delayMs(15);
 5ca:	8f e0       	ldi	r24, 0x0F	; 15
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 95 01 	call	0x32a	; 0x32a <delayMs>
		if(UserButtonPressed) {
 5d2:	4c 99       	sbic	0x09, 4	; 9
 5d4:	85 cf       	rjmp	.-246    	; 0x4e0 <main+0x6a>
			powerOffRobot();
 5d6:	0e 94 22 01 	call	0x244	; 0x244 <powerOffRobot>
			exit(1);
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <_exit>

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>

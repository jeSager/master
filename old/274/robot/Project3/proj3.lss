
proj3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000009c0  00000a54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  0080010c  0080010c  00000a60  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00001191  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000142a  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000050a  00000000  00000000  00002643  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000359  00000000  00000000  00002b4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002b0  00000000  00000000  00002ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003f0  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000046f  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  000039b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 92 03 	jmp	0x724	; 0x724 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 5f 03 	jmp	0x6be	; 0x6be <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 37       	cpi	r26, 0x7E	; 126
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <main>
  9e:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <stop>:
	}//endif
}//endfor
}//end main

void stop(void) {
	byteTx(CmdDriveWheels);
  a6:	81 e9       	ldi	r24, 0x91	; 145
  a8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x00);//velocity right wheel 0mm/s
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x00);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x00);//velocity left wheel 0mm/s
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x00);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <byteTx>

000000c4 <rotate>:
	}

void rotate(uint8_t degree, uint8_t r){//r for right
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	int rotateDelayMs = degree*8;//gives proper degree at 30cm/s
  d2:	98 e0       	ldi	r25, 0x08	; 8
  d4:	89 9f       	mul	r24, r25
  d6:	80 01       	movw	r16, r0
  d8:	11 24       	eor	r1, r1
	byteTx(CmdDriveWheels);	
  da:	81 e9       	ldi	r24, 0x91	; 145
  dc:	69 83       	std	Y+1, r22	; 0x01
  de:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	if(r){
  e2:	69 81       	ldd	r22, Y+1	; 0x01
  e4:	66 23       	and	r22, r22
  e6:	59 f0       	breq	.+22     	; 0xfe <rotate+0x3a>
	byteTx(0xfe);//velocity right wheel
  e8:	8e ef       	ldi	r24, 0xFE	; 254
  ea:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0xd4);
  ee:	84 ed       	ldi	r24, 0xD4	; 212
  f0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x01);//velocity left wheel 
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x2c);
  fa:	8c e2       	ldi	r24, 0x2C	; 44
  fc:	0a c0       	rjmp	.+20     	; 0x112 <rotate+0x4e>
	}	

	else{
	byteTx(0x01);//velocity right wheel
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x2c);
 104:	8c e2       	ldi	r24, 0x2C	; 44
 106:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0xfe);//velocity left wheel 
 10a:	8e ef       	ldi	r24, 0xFE	; 254
 10c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0xd4);
 110:	84 ed       	ldi	r24, 0xD4	; 212
 112:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	}
	delayMs(rotateDelayMs);
 116:	c8 01       	movw	r24, r16
	}
 118:	0f 90       	pop	r0
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
	byteTx(0x01);//velocity right wheel
	byteTx(0x2c);
	byteTx(0xfe);//velocity left wheel 
	byteTx(0xd4);
	}
	delayMs(rotateDelayMs);
 122:	0c 94 b7 03 	jmp	0x76e	; 0x76e <delayMs>

00000126 <driveStraightHome>:
	}
	robotState=findWall();
}

void driveStraightHome(void){
    byteTx(CmdDriveWheels);
 126:	81 e9       	ldi	r24, 0x91	; 145
 128:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x00); // Velocity right wheel 150mm/s
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x60);
 132:	80 e6       	ldi	r24, 0x60	; 96
 134:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x00); // Velocity left wheel 150mm/s
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x60);
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <byteTx>

00000144 <home>:
}//end straight home

void home(void){
    byteTx(CmdDriveWheels);
 144:	81 e9       	ldi	r24, 0x91	; 145
 146:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x00); // Velocity right wheel 150mm/s
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x20);
 150:	80 e2       	ldi	r24, 0x20	; 32
 152:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x00); // Velocity left wheel 150mm/s
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    byteTx(0x20);
 15c:	80 e2       	ldi	r24, 0x20	; 32
 15e:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <byteTx>

00000162 <faceHome>:
}//end straight home

void faceHome(uint8_t right){
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
    byteTx(CmdDriveWheels);
 166:	81 e9       	ldi	r24, 0x91	; 145
 168:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    if(right==1){
        byteTx(0x00); // Velocity right wheel 300mm/s
 16c:	80 e0       	ldi	r24, 0x00	; 0
    byteTx(0x20);
}//end straight home

void faceHome(uint8_t right){
    byteTx(CmdDriveWheels);
    if(right==1){
 16e:	c1 30       	cpi	r28, 0x01	; 1
 170:	51 f4       	brne	.+20     	; 0x186 <faceHome+0x24>
        byteTx(0x00); // Velocity right wheel 300mm/s
 172:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
        byteTx(0x70);
 176:	80 e7       	ldi	r24, 0x70	; 112
 178:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
        byteTx(0x00); // Velocity left wheel -300mm/s
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
        byteTx(0x20);
 182:	80 e2       	ldi	r24, 0x20	; 32
 184:	09 c0       	rjmp	.+18     	; 0x198 <faceHome+0x36>
    }
    else{
        byteTx(0x00); // Velocity left wheel 300mm/s
 186:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
        byteTx(0x20);
 18a:	80 e2       	ldi	r24, 0x20	; 32
 18c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
        byteTx(0x00); // Velocity right wheel -300mm/s
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
        byteTx(0x70);
 196:	80 e7       	ldi	r24, 0x70	; 112
	}

}//end faceHome
 198:	cf 91       	pop	r28
    }
    else{
        byteTx(0x00); // Velocity left wheel 300mm/s
        byteTx(0x20);
        byteTx(0x00); // Velocity right wheel -300mm/s
        byteTx(0x70);
 19a:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <byteTx>

0000019e <findWall>:
	}

}//end faceHome

int findWall(void) {
	if (sensors[SenBumpDrop]==1 || sensors[SenBumpDrop]==2 || sensors[SenBumpDrop]==3)
 19e:	20 91 49 01 	lds	r18, 0x0149
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	23 30       	cpi	r18, 0x03	; 3
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <findWall+0x12>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
		return 1; // 1 is wall found
	else return 0; // 0 is wall not found
}
 1b0:	08 95       	ret

000001b2 <driveStraight>:
	}
	delayMs(rotateDelayMs);
	}

void driveStraight(void){
	if(avgState<=0&&hasTurned==0){
 1b2:	80 91 23 01 	lds	r24, 0x0123
 1b6:	90 91 24 01 	lds	r25, 0x0124
 1ba:	89 2b       	or	r24, r25
 1bc:	a1 f4       	brne	.+40     	; 0x1e6 <driveStraight+0x34>
 1be:	80 91 0c 01 	lds	r24, 0x010C
 1c2:	81 11       	cpse	r24, r1
 1c4:	10 c0       	rjmp	.+32     	; 0x1e6 <driveStraight+0x34>
		byteTx(CmdDriveWheels);
 1c6:	81 e9       	ldi	r24, 0x91	; 145
 1c8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x00);//velocity right wheel 150mm/s
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x99);
 1d2:	89 e9       	ldi	r24, 0x99	; 153
 1d4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x00);//velocity left wheel 150mm/s
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x99);		
 1de:	89 e9       	ldi	r24, 0x99	; 153
 1e0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
 1e4:	12 c0       	rjmp	.+36     	; 0x20a <driveStraight+0x58>
	}
	else{
		byteTx(CmdDriveWheels);
 1e6:	81 e9       	ldi	r24, 0x91	; 145
 1e8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x00);//velocity right wheel 150mm/s
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x20);
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x00);//velocity left wheel 150mm/s
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x99);
 1fe:	89 e9       	ldi	r24, 0x99	; 153
 200:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		hasTurned=1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 0c 01 	sts	0x010C, r24
	}
	robotState=findWall();
 20a:	0e 94 cf 00 	call	0x19e	; 0x19e <findWall>
 20e:	80 93 10 01 	sts	0x0110, r24
 212:	08 95       	ret

00000214 <followWall>:
		return 1; // 1 is wall found
	else return 0; // 0 is wall not found
}

void followWall(void) {
	wheelSpeed=0x96;
 214:	26 e9       	ldi	r18, 0x96	; 150
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	30 93 2c 01 	sts	0x012C, r19
 21c:	20 93 2b 01 	sts	0x012B, r18
	leftSpeed=wheelSpeed-U;//16bit
 220:	80 91 3b 01 	lds	r24, 0x013B
 224:	99 27       	eor	r25, r25
 226:	87 fd       	sbrc	r24, 7
 228:	90 95       	com	r25
 22a:	28 1b       	sub	r18, r24
 22c:	39 0b       	sbc	r19, r25
 22e:	30 93 1b 01 	sts	0x011B, r19
 232:	20 93 1a 01 	sts	0x011A, r18
	highBitLeft=leftSpeed>>8;
 236:	30 93 25 01 	sts	0x0125, r19
	lowBitLeft=leftSpeed-(highBitLeft<<8);
 23a:	20 93 3a 01 	sts	0x013A, r18
	newSpeed=wheelSpeed+U;//16bit
 23e:	8a 56       	subi	r24, 0x6A	; 106
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	90 93 19 01 	sts	0x0119, r25
 246:	80 93 18 01 	sts	0x0118, r24
	highBit=newSpeed>>8;   
 24a:	90 93 48 01 	sts	0x0148, r25
	lowBit=newSpeed-(highBit<<8);
 24e:	80 93 26 01 	sts	0x0126, r24
	byteTx(CmdDriveWheels);
 252:	81 e9       	ldi	r24, 0x91	; 145
 254:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(highBit);//velocity right wheel 150mm/s+u
 258:	80 91 48 01 	lds	r24, 0x0148
 25c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(lowBit);
 260:	80 91 26 01 	lds	r24, 0x0126
 264:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	//left stays constant
	byteTx(highBitLeft);//velocity left wheel 150mm/s
 268:	80 91 25 01 	lds	r24, 0x0125
 26c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(lowBitLeft);
 270:	80 91 3a 01 	lds	r24, 0x013A
 274:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <byteTx>

00000278 <reverse>:

}


void reverse(void){
	byteTx(CmdDriveWheels);
 278:	81 e9       	ldi	r24, 0x91	; 145
 27a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0xff); //backwards
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x06);
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0xff);
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(0x06);
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	delayMs(2000);
 296:	80 ed       	ldi	r24, 0xD0	; 208
 298:	97 e0       	ldi	r25, 0x07	; 7
 29a:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
	stop();
 29e:	0c 94 53 00 	jmp	0xa6	; 0xa6 <stop>

000002a2 <driveStraightDistanceCm>:
	}
	else {
	}
}*/

	void driveStraightDistanceCm(int distance){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	ec 01       	movw	r28, r24
		uint8_t driveDelay= distance / 30 *1350;// 30 for 30 cm/s -- 1000 for conversion -- 350 for adjustment
		byteTx(CmdDriveWheels);
 2a8:	81 e9       	ldi	r24, 0x91	; 145
 2aa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x01);//velocity right wheel 300mm/s
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x2c);
 2b4:	8c e2       	ldi	r24, 0x2C	; 44
 2b6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x01);//velocity left wheel 300mm/s
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		byteTx(0x2c);
 2c0:	8c e2       	ldi	r24, 0x2C	; 44
 2c2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	else {
	}
}*/

	void driveStraightDistanceCm(int distance){
		uint8_t driveDelay= distance / 30 *1350;// 30 for 30 cm/s -- 1000 for conversion -- 350 for adjustment
 2c6:	ce 01       	movw	r24, r28
 2c8:	6e e1       	ldi	r22, 0x1E	; 30
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	0e 94 ca 04 	call	0x994	; 0x994 <__divmodhi4>
 2d0:	86 e4       	ldi	r24, 0x46	; 70
 2d2:	68 9f       	mul	r22, r24
 2d4:	80 2d       	mov	r24, r0
 2d6:	11 24       	eor	r1, r1
		byteTx(CmdDriveWheels);
		byteTx(0x01);//velocity right wheel 300mm/s
		byteTx(0x2c);
		byteTx(0x01);//velocity left wheel 300mm/s
		byteTx(0x2c);
		delayMs(driveDelay);
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
		stop();
 2de:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
		delayMs(15);
 2e2:	8f e0       	ldi	r24, 0x0F	; 15
 2e4:	90 e0       	ldi	r25, 0x00	; 0
	}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
		byteTx(0x2c);
		byteTx(0x01);//velocity left wheel 300mm/s
		byteTx(0x2c);
		delayMs(driveDelay);
		stop();
		delayMs(15);
 2ea:	0c 94 b7 03 	jmp	0x76e	; 0x76e <delayMs>

000002ee <updateSensors>:
	}
void updateSensors(void){
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
if(canSense==1){ // Using timer 0 to continuously update the sensor array
 2fa:	80 91 12 01 	lds	r24, 0x0112
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	09 f0       	breq	.+2      	; 0x304 <updateSensors+0x16>
 302:	08 c1       	rjmp	.+528    	; 0x514 <__stack+0x15>
	uint8_t i;
	while(UCSR0A & 0x80)
 304:	80 91 c0 00 	lds	r24, 0x00C0
 308:	87 ff       	sbrs	r24, 7
 30a:	03 c0       	rjmp	.+6      	; 0x312 <updateSensors+0x24>
	i = UDR0;
 30c:	80 91 c6 00 	lds	r24, 0x00C6
 310:	f9 cf       	rjmp	.-14     	; 0x304 <updateSensors+0x16>
	byteTx(CmdSensors);  // Sensor opcode 
 312:	8e e8       	ldi	r24, 0x8E	; 142
 314:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	byteTx(6);   // Send request for packet 0 
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
 31e:	c9 e4       	ldi	r28, 0x49	; 73
 320:	d1 e0       	ldi	r29, 0x01	; 1
	for(uint8_t i = 0; i < Sen6Size; i++) // Read each sensor byte
		sensors[i] = byteRx();
 322:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <byteRx>
 326:	89 93       	st	Y+, r24
	uint8_t i;
	while(UCSR0A & 0x80)
	i = UDR0;
	byteTx(CmdSensors);  // Sensor opcode 
	byteTx(6);   // Send request for packet 0 
	for(uint8_t i = 0; i < Sen6Size; i++) // Read each sensor byte
 328:	51 e0       	ldi	r21, 0x01	; 1
 32a:	cd 37       	cpi	r28, 0x7D	; 125
 32c:	d5 07       	cpc	r29, r21
 32e:	c9 f7       	brne	.-14     	; 0x322 <updateSensors+0x34>
		sensors[i] = byteRx();
	for (int i=0;i<9;i++) 
		state=sensors[SenWallSig1] << 8 | sensors[SenWallSig0];//[i]
 330:	20 91 63 01 	lds	r18, 0x0163
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	32 2f       	mov	r19, r18
 338:	22 27       	eor	r18, r18
 33a:	80 91 64 01 	lds	r24, 0x0164
 33e:	28 2b       	or	r18, r24
 340:	30 93 1f 01 	sts	0x011F, r19
 344:	20 93 1e 01 	sts	0x011E, r18

	//uint8_t force= (sensors[SenIRChar]==242);
	red= (sensors[SenIRChar]==248);
 348:	80 91 53 01 	lds	r24, 0x0153
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	88 3f       	cpi	r24, 0xF8	; 248
 350:	09 f0       	breq	.+2      	; 0x354 <updateSensors+0x66>
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	90 93 21 01 	sts	0x0121, r25
	green= (sensors[SenIRChar]==244);
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	84 3f       	cpi	r24, 0xF4	; 244
 35c:	09 f0       	breq	.+2      	; 0x360 <updateSensors+0x72>
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 20 01 	sts	0x0120, r25
	redgreen= (sensors[SenIRChar]==252);
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	8c 3f       	cpi	r24, 0xFC	; 252
 368:	09 f0       	breq	.+2      	; 0x36c <updateSensors+0x7e>
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	90 93 2a 01 	sts	0x012A, r25
	redgreenforce= (sensors[SenIRChar]==254);
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	8e 3f       	cpi	r24, 0xFE	; 254
 374:	09 f0       	breq	.+2      	; 0x378 <updateSensors+0x8a>
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	90 93 22 01 	sts	0x0122, r25
	greenforce= (sensors[SenIRChar]==246);
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	86 3f       	cpi	r24, 0xF6	; 246
 380:	09 f0       	breq	.+2      	; 0x384 <updateSensors+0x96>
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	90 93 38 01 	sts	0x0138, r25
	redforce= (sensors[SenIRChar]==250);
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	8a 3f       	cpi	r24, 0xFA	; 250
 38c:	09 f0       	breq	.+2      	; 0x390 <updateSensors+0xa2>
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	90 93 27 01 	sts	0x0127, r25
	goodIR= (red||green||redgreen||redgreenforce||greenforce||redforce);
 394:	48 2f       	mov	r20, r24
 396:	4d 7f       	andi	r20, 0xFD	; 253
 398:	48 3f       	cpi	r20, 0xF8	; 248
 39a:	11 f4       	brne	.+4      	; 0x3a0 <updateSensors+0xb2>
 39c:	41 e0       	ldi	r20, 0x01	; 1
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <updateSensors+0xbc>
 3a0:	48 2f       	mov	r20, r24
 3a2:	45 7f       	andi	r20, 0xF5	; 245
 3a4:	44 3f       	cpi	r20, 0xF4	; 244
 3a6:	d1 f3       	breq	.-12     	; 0x39c <updateSensors+0xae>
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	40 93 2d 01 	sts	0x012D, r20
	anyforce= (redgreenforce||greenforce||redforce);
 3ae:	87 7f       	andi	r24, 0xF7	; 247
 3b0:	86 3f       	cpi	r24, 0xF6	; 246
 3b2:	09 f4       	brne	.+2      	; 0x3b6 <updateSensors+0xc8>
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	90 93 28 01 	sts	0x0128, r25
	Red = 1.0
	Red + Force Field = 1.5 
	Red + Green = 2.0
	Red + Green + Force Field = 3.0
*/
	if(sensors[SenChAvailable]!=0)
 3ba:	80 91 70 01 	lds	r24, 0x0170
 3be:	88 23       	and	r24, r24
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <updateSensors+0xda>
		while(1)stop();
 3c2:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <updateSensors+0xd4>
	

	//populate array with whatever we have
	if(populateArray==0) {
 3c8:	80 91 0e 01 	lds	r24, 0x010E
 3cc:	81 11       	cpse	r24, r1
 3ce:	0d c0       	rjmp	.+26     	; 0x3ea <updateSensors+0xfc>
		for(int i=0;i<9;i++) 
			e[i]=SETPOINT-state;
 3d0:	80 91 07 01 	lds	r24, 0x0107
 3d4:	82 1b       	sub	r24, r18
 3d6:	ee e3       	ldi	r30, 0x3E	; 62
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	81 93       	st	Z+, r24
		while(1)stop();
	

	//populate array with whatever we have
	if(populateArray==0) {
		for(int i=0;i<9;i++) 
 3dc:	71 e0       	ldi	r23, 0x01	; 1
 3de:	e7 34       	cpi	r30, 0x47	; 71
 3e0:	f7 07       	cpc	r31, r23
 3e2:	d9 f7       	brne	.-10     	; 0x3da <updateSensors+0xec>
			e[i]=SETPOINT-state;
		populateArray=1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 0e 01 	sts	0x010E, r24
 3ea:	c0 e0       	ldi	r28, 0x00	; 0
 3ec:	d0 e0       	ldi	r29, 0x00	; 0
 3ee:	ef e3       	ldi	r30, 0x3F	; 63
 3f0:	f1 e0       	ldi	r31, 0x01	; 1
 3f2:	0e e3       	ldi	r16, 0x3E	; 62
 3f4:	11 e0       	ldi	r17, 0x01	; 1
 3f6:	6f e2       	ldi	r22, 0x2F	; 47
 3f8:	71 e0       	ldi	r23, 0x01	; 1
 3fa:	8e e2       	ldi	r24, 0x2E	; 46
 3fc:	e8 2e       	mov	r14, r24
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	f8 2e       	mov	r15, r24
	}

	///new loop
	sum=0;
	stateSum=0;
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	90 e0       	ldi	r25, 0x00	; 0

	//dump index 0~~bump values down
	for(int j=0;j<8;j++){
		e[j]=e[j+1];
 406:	51 91       	ld	r21, Z+
 408:	d8 01       	movw	r26, r16
 40a:	5d 93       	st	X+, r21
 40c:	8d 01       	movw	r16, r26
		sum=sum+e[j];
 40e:	c5 0f       	add	r28, r21
 410:	d1 1d       	adc	r29, r1
		s[j]=s[j+1];
 412:	db 01       	movw	r26, r22
 414:	5d 91       	ld	r21, X+
 416:	bd 01       	movw	r22, r26
 418:	d7 01       	movw	r26, r14
 41a:	5d 93       	st	X+, r21
 41c:	7d 01       	movw	r14, r26
		stateSum=stateSum+s[j];
 41e:	85 0f       	add	r24, r21
 420:	91 1d       	adc	r25, r1
	///new loop
	sum=0;
	stateSum=0;

	//dump index 0~~bump values down
	for(int j=0;j<8;j++){
 422:	b1 e0       	ldi	r27, 0x01	; 1
 424:	e7 34       	cpi	r30, 0x47	; 71
 426:	fb 07       	cpc	r31, r27
 428:	71 f7       	brne	.-36     	; 0x406 <updateSensors+0x118>
		s[j]=s[j+1];
		stateSum=stateSum+s[j];
	}

	//finish state avg
	s[9]=state;
 42a:	20 93 37 01 	sts	0x0137, r18
	stateSum=stateSum+s[9];
 42e:	82 0f       	add	r24, r18
 430:	91 1d       	adc	r25, r1
 432:	90 93 3d 01 	sts	0x013D, r25
 436:	80 93 3c 01 	sts	0x013C, r24
	avgState=stateSum/10;
 43a:	6a e0       	ldi	r22, 0x0A	; 10
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	0e 94 b6 04 	call	0x96c	; 0x96c <__udivmodhi4>
 442:	70 93 24 01 	sts	0x0124, r23
 446:	60 93 23 01 	sts	0x0123, r22

	//finish i summation
	e[9]=SETPOINT-state;
 44a:	50 91 07 01 	lds	r21, 0x0107
 44e:	52 1b       	sub	r21, r18
 450:	50 93 47 01 	sts	0x0147, r21
	sum=sum+e[9];
 454:	85 2f       	mov	r24, r21
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	c8 0f       	add	r28, r24
 45a:	d9 1f       	adc	r29, r25
 45c:	d0 93 1d 01 	sts	0x011D, r29
 460:	c0 93 1c 01 	sts	0x011C, r28

	//use the array to complete the formula
	P=PGain*e[9];
 464:	e0 91 06 01 	lds	r30, 0x0106
 468:	5e 9f       	mul	r21, r30
 46a:	e0 2d       	mov	r30, r0
 46c:	11 24       	eor	r1, r1
 46e:	e0 93 7d 01 	sts	0x017D, r30
	I=IGain*sum*T;
 472:	60 91 02 01 	lds	r22, 0x0102
 476:	50 91 05 01 	lds	r21, 0x0105
 47a:	65 9f       	mul	r22, r21
 47c:	50 2d       	mov	r21, r0
 47e:	11 24       	eor	r1, r1
 480:	5c 9f       	mul	r21, r28
 482:	c0 2d       	mov	r28, r0
 484:	11 24       	eor	r1, r1
 486:	c0 93 39 01 	sts	0x0139, r28
	D=DGain*((e[9]-e[8])/T);
 48a:	50 91 46 01 	lds	r21, 0x0146
 48e:	85 1b       	sub	r24, r21
 490:	91 09       	sbc	r25, r1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	0e 94 ca 04 	call	0x994	; 0x994 <__divmodhi4>
 498:	80 91 04 01 	lds	r24, 0x0104
 49c:	86 9f       	mul	r24, r22
 49e:	60 2d       	mov	r22, r0
 4a0:	11 24       	eor	r1, r1
 4a2:	60 93 17 01 	sts	0x0117, r22
	U=(P+I+D)/PROPORTIONAL4U;
 4a6:	8c 2f       	mov	r24, r28
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	8e 0f       	add	r24, r30
 4ac:	91 1d       	adc	r25, r1
 4ae:	86 0f       	add	r24, r22
 4b0:	91 1d       	adc	r25, r1
 4b2:	60 91 03 01 	lds	r22, 0x0103
 4b6:	70 e0       	ldi	r23, 0x00	; 0
 4b8:	0e 94 ca 04 	call	0x994	; 0x994 <__divmodhi4>
 4bc:	60 93 3b 01 	sts	0x013B, r22
 4c0:	80 91 49 01 	lds	r24, 0x0149

	// Robot states
	// If wall reading and no bumper, then robot should align/follow wall

	if (state>=6 && sensors[SenBumpDrop]==0){ //ADDED LINE TO SENSE BUMPER WHILE FOLLOWING WALL
 4c4:	26 30       	cpi	r18, 0x06	; 6
 4c6:	31 05       	cpc	r19, r1
 4c8:	48 f0       	brcs	.+18     	; 0x4dc <updateSensors+0x1ee>
 4ca:	81 11       	cpse	r24, r1
 4cc:	07 c0       	rjmp	.+14     	; 0x4dc <updateSensors+0x1ee>
		robotState=2; // Aligned with wall (follow)
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	80 93 10 01 	sts	0x0110, r24
		startIR=true;				
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 0f 01 	sts	0x010F, r24
 4da:	0b c0       	rjmp	.+22     	; 0x4f2 <updateSensors+0x204>
	}
	// If no wall reading and no bumper, robot should look for a wall
	else if (sensors[SenBumpDrop]==0 && state<=5) 
 4dc:	81 11       	cpse	r24, r1
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <updateSensors+0x1fe>
 4e0:	26 30       	cpi	r18, 0x06	; 6
 4e2:	31 05       	cpc	r19, r1
 4e4:	18 f4       	brcc	.+6      	; 0x4ec <updateSensors+0x1fe>
		robotState=0; // No wall (drive straight)//NO DRIVE TO THE LEFT MORE SLOWER-E
 4e6:	10 92 10 01 	sts	0x0110, r1
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <updateSensors+0x204>
	// Otherwise, robot is against the wall and needs to rotate to keep moving
	else
		robotState=1; // Found wall (rotate)
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 10 01 	sts	0x0110, r24

	if (goodIR&&startIR){
 4f2:	44 23       	and	r20, r20
 4f4:	39 f0       	breq	.+14     	; 0x504 <__stack+0x5>
 4f6:	80 91 0f 01 	lds	r24, 0x010F
 4fa:	88 23       	and	r24, r24
 4fc:	19 f0       	breq	.+6      	; 0x504 <__stack+0x5>
		robotState=3; // Docking station signal detected and wallfollowed
 4fe:	83 e0       	ldi	r24, 0x03	; 3
 500:	80 93 10 01 	sts	0x0110, r24
	}




	senseTimerCount=100;
 504:	84 e6       	ldi	r24, 0x64	; 100
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 0a 01 	sts	0x010A, r25
 50c:	80 93 09 01 	sts	0x0109, r24
	canSense=0;
 510:	10 92 12 01 	sts	0x0112, r1
}//end if (canSense)

}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	ff 90       	pop	r15
 51e:	ef 90       	pop	r14
 520:	08 95       	ret

00000522 <dock>:
else if(redgreen){
	located=true;
	driveStraightHome();
}*/

if(first){
 522:	80 91 00 01 	lds	r24, 0x0100
 526:	88 23       	and	r24, r24
 528:	19 f1       	breq	.+70     	; 0x570 <dock+0x4e>
	rotate(90, left);
 52a:	60 91 11 01 	lds	r22, 0x0111
 52e:	8a e5       	ldi	r24, 0x5A	; 90
 530:	0e 94 62 00 	call	0xc4	; 0xc4 <rotate>
	first=false;
 534:	10 92 00 01 	sts	0x0100, r1
	while(sensors[SenBumpDrop]!=0){
 538:	80 91 49 01 	lds	r24, 0x0149
 53c:	88 23       	and	r24, r24
 53e:	c1 f0       	breq	.+48     	; 0x570 <dock+0x4e>
		rotate(5,left);
 540:	60 91 11 01 	lds	r22, 0x0111
 544:	85 e0       	ldi	r24, 0x05	; 5
 546:	0e 94 62 00 	call	0xc4	; 0xc4 <rotate>
		updateSensors();		
 54a:	0e 94 77 01 	call	0x2ee	; 0x2ee <updateSensors>
 54e:	f4 cf       	rjmp	.-24     	; 0x538 <dock+0x16>
while(1){
updateSensors();
//movement
if(sensors[SenBumpDrop]!=0){

	byteTx(CmdSafe);
 550:	83 e8       	ldi	r24, 0x83	; 131
 552:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
	stop();
 556:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
	delayMs(5000);
 55a:	88 e8       	ldi	r24, 0x88	; 136
 55c:	93 e1       	ldi	r25, 0x13	; 19
 55e:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
	updateSensors();
 562:	0e 94 77 01 	call	0x2ee	; 0x2ee <updateSensors>

	if(sensors[SenBumpDrop]!=0){
 566:	80 91 49 01 	lds	r24, 0x0149
 56a:	81 11       	cpse	r24, r1
		reverse();
 56c:	0e 94 3c 01 	call	0x278	; 0x278 <reverse>
		rotate(5,left);
		updateSensors();		
	}
}
while(1){
updateSensors();
 570:	0e 94 77 01 	call	0x2ee	; 0x2ee <updateSensors>
//movement
if(sensors[SenBumpDrop]!=0){
 574:	80 91 49 01 	lds	r24, 0x0149
 578:	81 11       	cpse	r24, r1
 57a:	ea cf       	rjmp	.-44     	; 0x550 <dock+0x2e>

	if(sensors[SenBumpDrop]!=0){
		reverse();
	}
}
else if(red||redforce)//red
 57c:	80 91 21 01 	lds	r24, 0x0121
 580:	81 11       	cpse	r24, r1
 582:	04 c0       	rjmp	.+8      	; 0x58c <dock+0x6a>
 584:	80 91 27 01 	lds	r24, 0x0127
 588:	88 23       	and	r24, r24
 58a:	19 f0       	breq	.+6      	; 0x592 <dock+0x70>
	faceHome(right);
 58c:	80 91 08 01 	lds	r24, 0x0108
 590:	0a c0       	rjmp	.+20     	; 0x5a6 <dock+0x84>
else if(green||greenforce)//green
 592:	80 91 20 01 	lds	r24, 0x0120
 596:	81 11       	cpse	r24, r1
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <dock+0x80>
 59a:	80 91 38 01 	lds	r24, 0x0138
 59e:	88 23       	and	r24, r24
 5a0:	29 f0       	breq	.+10     	; 0x5ac <dock+0x8a>
	faceHome(left);
 5a2:	80 91 11 01 	lds	r24, 0x0111
 5a6:	0e 94 b1 00 	call	0x162	; 0x162 <faceHome>
 5aa:	e2 cf       	rjmp	.-60     	; 0x570 <dock+0x4e>
else
	driveStraightHome();
 5ac:	0e 94 93 00 	call	0x126	; 0x126 <driveStraightHome>
 5b0:	df cf       	rjmp	.-66     	; 0x570 <dock+0x4e>

000005b2 <defineSongs>:
#include "timer.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
 5b2:	8c e8       	ldi	r24, 0x8C	; 140
 5b4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(RESET_SONG);
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(4);
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(60);
 5c4:	8c e3       	ldi	r24, 0x3C	; 60
 5c6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(6);
 5ca:	86 e0       	ldi	r24, 0x06	; 6
 5cc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(72);
 5d0:	88 e4       	ldi	r24, 0x48	; 72
 5d2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(6);
 5d6:	86 e0       	ldi	r24, 0x06	; 6
 5d8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(84);
 5dc:	84 e5       	ldi	r24, 0x54	; 84
 5de:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(6);
 5e2:	86 e0       	ldi	r24, 0x06	; 6
 5e4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(96);
 5e8:	80 e6       	ldi	r24, 0x60	; 96
 5ea:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(6);
 5ee:	86 e0       	ldi	r24, 0x06	; 6
 5f0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>

  // Start song
  byteTx(CmdSong);
 5f4:	8c e8       	ldi	r24, 0x8C	; 140
 5f6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(START_SONG);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(6);
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(69);
 606:	85 e4       	ldi	r24, 0x45	; 69
 608:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(18);
 60c:	82 e1       	ldi	r24, 0x12	; 18
 60e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(72);
 612:	88 e4       	ldi	r24, 0x48	; 72
 614:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(12);
 618:	8c e0       	ldi	r24, 0x0C	; 12
 61a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(74);
 61e:	8a e4       	ldi	r24, 0x4A	; 74
 620:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(12);
 624:	8c e0       	ldi	r24, 0x0C	; 12
 626:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(72);
 62a:	88 e4       	ldi	r24, 0x48	; 72
 62c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(12);
 630:	8c e0       	ldi	r24, 0x0C	; 12
 632:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(69);
 636:	85 e4       	ldi	r24, 0x45	; 69
 638:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(12);
 63c:	8c e0       	ldi	r24, 0x0C	; 12
 63e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(77);
 642:	8d e4       	ldi	r24, 0x4D	; 77
 644:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
  byteTx(24);
 648:	88 e1       	ldi	r24, 0x18	; 24
 64a:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <byteTx>

0000064e <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
 64e:	1d 99       	sbic	0x03, 5	; 3
 650:	12 c0       	rjmp	.+36     	; 0x676 <powerOnRobot+0x28>
    while(!RobotIsOn) {
 652:	1d 99       	sbic	0x03, 5	; 3
 654:	0c c0       	rjmp	.+24     	; 0x66e <powerOnRobot+0x20>
      RobotPwrToggleLow;
 656:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 658:	84 ef       	ldi	r24, 0xF4	; 244
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 660:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 662:	84 e6       	ldi	r24, 0x64	; 100
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
      RobotPwrToggleLow;
 66a:	5f 98       	cbi	0x0b, 7	; 11
 66c:	f2 cf       	rjmp	.-28     	; 0x652 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
 66e:	8c ea       	ldi	r24, 0xAC	; 172
 670:	9d e0       	ldi	r25, 0x0D	; 13
 672:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
 676:	80 91 c0 00 	lds	r24, 0x00C0
 67a:	87 ff       	sbrs	r24, 7
 67c:	04 c0       	rjmp	.+8      	; 0x686 <powerOnRobot+0x38>
 67e:	80 91 c6 00 	lds	r24, 0x00C6
 682:	81 11       	cpse	r24, r1
 684:	f8 cf       	rjmp	.-16     	; 0x676 <powerOnRobot+0x28>
 686:	08 95       	ret

00000688 <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
 688:	1d 9b       	sbis	0x03, 5	; 3
 68a:	08 95       	ret
    while(RobotIsOn) {
 68c:	1d 9b       	sbis	0x03, 5	; 3
 68e:	0c c0       	rjmp	.+24     	; 0x6a8 <powerOffRobot+0x20>
      RobotPwrToggleLow;
 690:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 692:	84 ef       	ldi	r24, 0xF4	; 244
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 69a:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 69c:	84 e6       	ldi	r24, 0x64	; 100
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
      RobotPwrToggleLow;
 6a4:	5f 98       	cbi	0x0b, 7	; 11
 6a6:	f2 cf       	rjmp	.-28     	; 0x68c <powerOffRobot+0x4>
 6a8:	08 95       	ret

000006aa <__vector_18>:

volatile uint8_t canPrint=0;
volatile uint16_t senseTimerCount=100;
volatile uint8_t canSense=0;

ISR(USART_RX_vect) {  //SIGNAL(SIG_USART_RECV) 
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
  
  // CSCE 274 students, I have only ever used this method 
  // when retrieving/storing a large amount of sensor data. 
  // You DO NOT need it for this assignment. If i feel it 
  // becomes relevant, I will show you how/when to use it.
}
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <__vector_14>:

//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER0_COMPA_vect) {
 6be:	1f 92       	push	r1
 6c0:	0f 92       	push	r0
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	0f 92       	push	r0
 6c6:	11 24       	eor	r1, r1
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
  // Interrupt handler called every 1ms.
  // Decrement the counter variable, to allow delayMs to keep time.
  if(delayTimerCount != 0) {
 6cc:	80 91 15 01 	lds	r24, 0x0115
 6d0:	90 91 16 01 	lds	r25, 0x0116
 6d4:	89 2b       	or	r24, r25
 6d6:	51 f0       	breq	.+20     	; 0x6ec <__vector_14+0x2e>
    delayTimerCount--;
 6d8:	80 91 15 01 	lds	r24, 0x0115
 6dc:	90 91 16 01 	lds	r25, 0x0116
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	90 93 16 01 	sts	0x0116, r25
 6e6:	80 93 15 01 	sts	0x0115, r24
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <__vector_14+0x32>
  } else {
    delayTimerRunning = 0;
 6ec:	10 92 14 01 	sts	0x0114, r1
  }

  if(senseTimerCount !=0) {
 6f0:	80 91 09 01 	lds	r24, 0x0109
 6f4:	90 91 0a 01 	lds	r25, 0x010A
 6f8:	89 2b       	or	r24, r25
 6fa:	51 f0       	breq	.+20     	; 0x710 <__vector_14+0x52>
    senseTimerCount--;
 6fc:	80 91 09 01 	lds	r24, 0x0109
 700:	90 91 0a 01 	lds	r25, 0x010A
 704:	01 97       	sbiw	r24, 0x01	; 1
 706:	90 93 0a 01 	sts	0x010A, r25
 70a:	80 93 09 01 	sts	0x0109, r24
 70e:	03 c0       	rjmp	.+6      	; 0x716 <__vector_14+0x58>
  } else {
    canSense =1;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 12 01 	sts	0x0112, r24
  }
}
 716:	9f 91       	pop	r25
 718:	8f 91       	pop	r24
 71a:	0f 90       	pop	r0
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	0f 90       	pop	r0
 720:	1f 90       	pop	r1
 722:	18 95       	reti

00000724 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	8f 93       	push	r24
  canPrint=1;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	80 93 13 01 	sts	0x0113, r24
}
 736:	8f 91       	pop	r24
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <setupTimer>:

void setupTimer(void) {
// Set up the timer 1 interupt to be called every 1ms.
// It's probably best to treat this as a black box.
  TCCR0A = _BV(WGM01);
 742:	22 e0       	ldi	r18, 0x02	; 2
 744:	24 bd       	out	0x24, r18	; 36
  TCCR0B = (_BV(CS00) | _BV(CS02));
 746:	85 e0       	ldi	r24, 0x05	; 5
 748:	85 bd       	out	0x25, r24	; 37
    // TCCR1B = 0x0C;
  OCR0A = 17;
 74a:	81 e1       	ldi	r24, 0x11	; 17
 74c:	87 bd       	out	0x27, r24	; 39
  TIMSK0 = _BV(OCIE0A);
 74e:	20 93 6e 00 	sts	0x006E, r18
    // TIMSK1 = 0x02;

  // Timer 1 setup
  TCCR1A = 0x00;
 752:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS10) | _BV(CS12));
 756:	8d e0       	ldi	r24, 0x0D	; 13
 758:	80 93 81 00 	sts	0x0081, r24
    // TCCR1B = 0x0C;
  OCR1A = 17999;
 75c:	8f e4       	ldi	r24, 0x4F	; 79
 75e:	96 e4       	ldi	r25, 0x46	; 70
 760:	90 93 89 00 	sts	0x0089, r25
 764:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
 768:	20 93 6f 00 	sts	0x006F, r18
 76c:	08 95       	ret

0000076e <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint16_t time_ms)
{
  delayTimerRunning = 1;
 76e:	21 e0       	ldi	r18, 0x01	; 1
 770:	20 93 14 01 	sts	0x0114, r18
  delayTimerCount = time_ms;
 774:	90 93 16 01 	sts	0x0116, r25
 778:	80 93 15 01 	sts	0x0115, r24
  while(delayTimerRunning) ;
 77c:	80 91 14 01 	lds	r24, 0x0114
 780:	81 11       	cpse	r24, r1
 782:	fc cf       	rjmp	.-8      	; 0x77c <delayMs+0xe>
}
 784:	08 95       	ret

00000786 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
 786:	80 e1       	ldi	r24, 0x10	; 16
 788:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
 78a:	8f ec       	ldi	r24, 0xCF	; 207
 78c:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
 78e:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
 790:	8f ef       	ldi	r24, 0xFF	; 255
 792:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
 794:	86 ee       	ldi	r24, 0xE6	; 230
 796:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
 798:	8d e7       	ldi	r24, 0x7D	; 125
 79a:	8b b9       	out	0x0b, r24	; 11
 79c:	08 95       	ret

0000079e <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
 79e:	83 e1       	ldi	r24, 0x13	; 19
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	90 93 c5 00 	sts	0x00C5, r25
 7a6:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
 7aa:	88 e9       	ldi	r24, 0x98	; 152
 7ac:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
 7b0:	86 e0       	ldi	r24, 0x06	; 6
 7b2:	80 93 c2 00 	sts	0x00C2, r24
 7b6:	08 95       	ret

000007b8 <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
 7b8:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
 7ba:	0e 94 c3 03 	call	0x786	; 0x786 <setupIOPins>
  setupTimer();
 7be:	0e 94 a1 03 	call	0x742	; 0x742 <setupTimer>
  setupSerialPort();
 7c2:	0e 94 cf 03 	call	0x79e	; 0x79e <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
 7c6:	78 94       	sei
 7c8:	08 95       	ret

000007ca <byteTx>:
}

void byteTx(uint8_t value) {
  // Transmit one byte to the robot.
  // Wait for the buffer to be empty.
  while(!(UCSR0A & 0x20)) ;
 7ca:	90 91 c0 00 	lds	r25, 0x00C0
 7ce:	95 ff       	sbrs	r25, 5
 7d0:	fc cf       	rjmp	.-8      	; 0x7ca <byteTx>

  // Send the byte.
  UDR0 = value;
 7d2:	80 93 c6 00 	sts	0x00C6, r24
 7d6:	08 95       	ret

000007d8 <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
 7d8:	80 91 c0 00 	lds	r24, 0x00C0
 7dc:	87 ff       	sbrs	r24, 7
 7de:	fc cf       	rjmp	.-8      	; 0x7d8 <byteRx>
  
  // Return that byte.
  return UDR0;
 7e0:	80 91 c6 00 	lds	r24, 0x00C6
}
 7e4:	08 95       	ret

000007e6 <baud>:

void baud(uint8_t baud_code) {
 7e6:	cf 93       	push	r28
 7e8:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
 7ea:	8c 30       	cpi	r24, 0x0C	; 12
 7ec:	08 f0       	brcs	.+2      	; 0x7f0 <baud+0xa>
 7ee:	53 c0       	rjmp	.+166    	; 0x896 <baud+0xb0>
  {
    byteTx(CmdBaud);
 7f0:	81 e8       	ldi	r24, 0x81	; 129
 7f2:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    UCSR0A |= _BV(TXC0);
 7f6:	80 91 c0 00 	lds	r24, 0x00C0
 7fa:	80 64       	ori	r24, 0x40	; 64
 7fc:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
 800:	8c 2f       	mov	r24, r28
 802:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
 806:	80 91 c0 00 	lds	r24, 0x00C0
 80a:	86 ff       	sbrs	r24, 6
 80c:	fc cf       	rjmp	.-8      	; 0x806 <baud+0x20>

    cli();
 80e:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
 810:	cb 30       	cpi	r28, 0x0B	; 11
 812:	19 f4       	brne	.+6      	; 0x81a <baud+0x34>
      UBRR0 = Ubrr115200;
 814:	89 e0       	ldi	r24, 0x09	; 9
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	34 c0       	rjmp	.+104    	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud57600) {
 81a:	ca 30       	cpi	r28, 0x0A	; 10
 81c:	19 f4       	brne	.+6      	; 0x824 <baud+0x3e>
      UBRR0 = Ubrr57600;
 81e:	83 e1       	ldi	r24, 0x13	; 19
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	2f c0       	rjmp	.+94     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud38400) {
 824:	c9 30       	cpi	r28, 0x09	; 9
 826:	19 f4       	brne	.+6      	; 0x82e <baud+0x48>
      UBRR0 = Ubrr38400;
 828:	8d e1       	ldi	r24, 0x1D	; 29
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	2a c0       	rjmp	.+84     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud28800) {
 82e:	c8 30       	cpi	r28, 0x08	; 8
 830:	19 f4       	brne	.+6      	; 0x838 <baud+0x52>
      UBRR0 = Ubrr28800;
 832:	87 e2       	ldi	r24, 0x27	; 39
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	25 c0       	rjmp	.+74     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud19200) {
 838:	c7 30       	cpi	r28, 0x07	; 7
 83a:	19 f4       	brne	.+6      	; 0x842 <baud+0x5c>
      UBRR0 = Ubrr19200;
 83c:	8b e3       	ldi	r24, 0x3B	; 59
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	20 c0       	rjmp	.+64     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud14400) {
 842:	c6 30       	cpi	r28, 0x06	; 6
 844:	19 f4       	brne	.+6      	; 0x84c <baud+0x66>
      UBRR0 = Ubrr14400;
 846:	8f e4       	ldi	r24, 0x4F	; 79
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	1b c0       	rjmp	.+54     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud9600) {
 84c:	c5 30       	cpi	r28, 0x05	; 5
 84e:	19 f4       	brne	.+6      	; 0x856 <baud+0x70>
      UBRR0 = Ubrr9600;
 850:	87 e7       	ldi	r24, 0x77	; 119
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	16 c0       	rjmp	.+44     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud4800) {
 856:	c4 30       	cpi	r28, 0x04	; 4
 858:	19 f4       	brne	.+6      	; 0x860 <baud+0x7a>
      UBRR0 = Ubrr4800;
 85a:	8f ee       	ldi	r24, 0xEF	; 239
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	11 c0       	rjmp	.+34     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud2400) {
 860:	c3 30       	cpi	r28, 0x03	; 3
 862:	19 f4       	brne	.+6      	; 0x86a <baud+0x84>
      UBRR0 = Ubrr2400;
 864:	8f ed       	ldi	r24, 0xDF	; 223
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	0c c0       	rjmp	.+24     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud1200) {
 86a:	c2 30       	cpi	r28, 0x02	; 2
 86c:	19 f4       	brne	.+6      	; 0x874 <baud+0x8e>
      UBRR0 = Ubrr1200;
 86e:	8f eb       	ldi	r24, 0xBF	; 191
 870:	93 e0       	ldi	r25, 0x03	; 3
 872:	07 c0       	rjmp	.+14     	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud600) {
 874:	c1 30       	cpi	r28, 0x01	; 1
 876:	19 f4       	brne	.+6      	; 0x87e <baud+0x98>
      UBRR0 = Ubrr600;
 878:	8f e7       	ldi	r24, 0x7F	; 127
 87a:	97 e0       	ldi	r25, 0x07	; 7
 87c:	02 c0       	rjmp	.+4      	; 0x882 <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	9e e0       	ldi	r25, 0x0E	; 14
 882:	90 93 c5 00 	sts	0x00C5, r25
 886:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
 88a:	78 94       	sei

    delayMs(100);
 88c:	84 e6       	ldi	r24, 0x64	; 100
 88e:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 890:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
 892:	0c 94 b7 03 	jmp	0x76e	; 0x76e <delayMs>
  }
}
 896:	cf 91       	pop	r28
 898:	08 95       	ret

0000089a <setSerialDestination>:

void setSerialDestination(uint8_t  dest) {
 89a:	cf 93       	push	r28
 89c:	c8 2f       	mov	r28, r24
// Which serial port should byteTx and byteRx talk to?
// Ensure any pending bytes have been sent. Without this, the last byte sent
// before calling this might seem to disappear.
delayMs (10);
 89e:	8a e0       	ldi	r24, 0x0A	; 10
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
// Configure the port.
if (dest ==  SERIAL_CREATE) {
 8a6:	c1 30       	cpi	r28, 0x01	; 1
 8a8:	11 f4       	brne	.+4      	; 0x8ae <setSerialDestination+0x14>
  PORTB  &= ~0x10;
 8aa:	2c 98       	cbi	0x05, 4	; 5
 8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <setSerialDestination+0x16>
}
else {
  PORTB  |= 0x10;
 8ae:	2c 9a       	sbi	0x05, 4	; 5
}
// Wait a bit to let things get back to normal. According to the docs, this
// should be at least 10 times the amount of time needed to send one byte.
// This is less than 1 millisecond. We are using a much longer delay to be
// super extra sure.
delayMs (10);
 8b0:	8a e0       	ldi	r24, 0x0A	; 10
 8b2:	90 e0       	ldi	r25, 0x00	; 0
}
 8b4:	cf 91       	pop	r28
}
// Wait a bit to let things get back to normal. According to the docs, this
// should be at least 10 times the amount of time needed to send one byte.
// This is less than 1 millisecond. We are using a much longer delay to be
// super extra sure.
delayMs (10);
 8b6:	0c 94 b7 03 	jmp	0x76e	; 0x76e <delayMs>

000008ba <main>:
uint8_t anyforce;


int main(void) {
// Set up Create and module
initializeCommandModule();
 8ba:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <initializeCommandModule>

powerOnRobot();
 8be:	0e 94 27 03 	call	0x64e	; 0x64e <powerOnRobot>
// Is the Robot on
byteTx(CmdStart);
 8c2:	80 e8       	ldi	r24, 0x80	; 128
 8c4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
// Start the create
baud(Baud57600);
 8c8:	8a e0       	ldi	r24, 0x0A	; 10
 8ca:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <baud>
// Set the baud rate for the Create and Command Module
defineSongs();
 8ce:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <defineSongs>
// Define some songs so that we know the robot is on.
byteTx(CmdControl);
 8d2:	82 e8       	ldi	r24, 0x82	; 130
 8d4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
// Deprecated form of safe mode. I use it because it will
// turn of all LEDs, so it's essentially a reset.
byteTx(CmdFull);
 8d8:	84 e8       	ldi	r24, 0x84	; 132
 8da:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>

// CSCE 274 students: I would make sure the robot stops. 
//                    As a precaution for the robot and your grade.

// Play the reset song and wait while it plays.
byteTx(CmdPlay);
 8de:	8d e8       	ldi	r24, 0x8D	; 141
 8e0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
byteTx(RESET_SONG);
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
delayMs(750);
 8ea:	8e ee       	ldi	r24, 0xEE	; 238
 8ec:	92 e0       	ldi	r25, 0x02	; 2
 8ee:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>

// Turn the power button on to something. I like red, but here is green.
// CSCE 274 students: The following should (will) be a function that you write.
byteTx(CmdLeds);
 8f2:	8b e8       	ldi	r24, 0x8B	; 139
 8f4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
byteTx(0x00);
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
byteTx(0);
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
byteTx(255);
 904:	8f ef       	ldi	r24, 0xFF	; 255
 906:	0e 94 e5 03 	call	0x7ca	; 0x7ca <byteTx>
		stop();
		rotate(5,left);
	}
	else if (robotState==2){
	followWall();
	hasTurned=1;
 90a:	c1 e0       	ldi	r28, 0x01	; 1
byteTx(0);
byteTx(255);

// Infinite operation loop
for(;;) {
updateSensors();
 90c:	0e 94 77 01 	call	0x2ee	; 0x2ee <updateSensors>


if(sensors[SenBumpDrop]<=4) {
 910:	80 91 49 01 	lds	r24, 0x0149
 914:	85 30       	cpi	r24, 0x05	; 5
 916:	e0 f4       	brcc	.+56     	; 0x950 <main+0x96>
	if(robotState==3)
 918:	80 91 10 01 	lds	r24, 0x0110
 91c:	83 30       	cpi	r24, 0x03	; 3
 91e:	11 f4       	brne	.+4      	; 0x924 <main+0x6a>
		dock();
 920:	0e 94 91 02 	call	0x522	; 0x522 <dock>
	else 
	if (robotState==0)// no wall, drive straight
 924:	81 11       	cpse	r24, r1
 926:	03 c0       	rjmp	.+6      	; 0x92e <main+0x74>
		driveStraight();
 928:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <driveStraight>
 92c:	13 c0       	rjmp	.+38     	; 0x954 <main+0x9a>
	else if (robotState==1) { // on wall, stop and rotate
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	41 f4       	brne	.+16     	; 0x942 <main+0x88>
		stop();
 932:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>
		rotate(5,left);
 936:	60 91 11 01 	lds	r22, 0x0111
 93a:	85 e0       	ldi	r24, 0x05	; 5
 93c:	0e 94 62 00 	call	0xc4	; 0xc4 <rotate>
 940:	09 c0       	rjmp	.+18     	; 0x954 <main+0x9a>
	}
	else if (robotState==2){
 942:	82 30       	cpi	r24, 0x02	; 2
 944:	39 f4       	brne	.+14     	; 0x954 <main+0x9a>
	followWall();
 946:	0e 94 0a 01 	call	0x214	; 0x214 <followWall>
	hasTurned=1;
 94a:	c0 93 0c 01 	sts	0x010C, r28
 94e:	02 c0       	rjmp	.+4      	; 0x954 <main+0x9a>
	}
	
} // wheel drop detection
else
	stop();
 950:	0e 94 53 00 	call	0xa6	; 0xa6 <stop>

delayMs(15);
 954:	8f e0       	ldi	r24, 0x0F	; 15
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 b7 03 	call	0x76e	; 0x76e <delayMs>
if(UserButtonPressed) {
 95c:	4c 99       	sbic	0x09, 4	; 9
 95e:	d6 cf       	rjmp	.-84     	; 0x90c <main+0x52>
	powerOffRobot();
 960:	0e 94 44 03 	call	0x688	; 0x688 <powerOffRobot>
	exit(1);
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	0e 94 de 04 	call	0x9bc	; 0x9bc <_exit>

0000096c <__udivmodhi4>:
 96c:	aa 1b       	sub	r26, r26
 96e:	bb 1b       	sub	r27, r27
 970:	51 e1       	ldi	r21, 0x11	; 17
 972:	07 c0       	rjmp	.+14     	; 0x982 <__udivmodhi4_ep>

00000974 <__udivmodhi4_loop>:
 974:	aa 1f       	adc	r26, r26
 976:	bb 1f       	adc	r27, r27
 978:	a6 17       	cp	r26, r22
 97a:	b7 07       	cpc	r27, r23
 97c:	10 f0       	brcs	.+4      	; 0x982 <__udivmodhi4_ep>
 97e:	a6 1b       	sub	r26, r22
 980:	b7 0b       	sbc	r27, r23

00000982 <__udivmodhi4_ep>:
 982:	88 1f       	adc	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	5a 95       	dec	r21
 988:	a9 f7       	brne	.-22     	; 0x974 <__udivmodhi4_loop>
 98a:	80 95       	com	r24
 98c:	90 95       	com	r25
 98e:	bc 01       	movw	r22, r24
 990:	cd 01       	movw	r24, r26
 992:	08 95       	ret

00000994 <__divmodhi4>:
 994:	97 fb       	bst	r25, 7
 996:	07 2e       	mov	r0, r23
 998:	16 f4       	brtc	.+4      	; 0x99e <__divmodhi4+0xa>
 99a:	00 94       	com	r0
 99c:	07 d0       	rcall	.+14     	; 0x9ac <__divmodhi4_neg1>
 99e:	77 fd       	sbrc	r23, 7
 9a0:	09 d0       	rcall	.+18     	; 0x9b4 <__divmodhi4_neg2>
 9a2:	0e 94 b6 04 	call	0x96c	; 0x96c <__udivmodhi4>
 9a6:	07 fc       	sbrc	r0, 7
 9a8:	05 d0       	rcall	.+10     	; 0x9b4 <__divmodhi4_neg2>
 9aa:	3e f4       	brtc	.+14     	; 0x9ba <__divmodhi4_exit>

000009ac <__divmodhi4_neg1>:
 9ac:	90 95       	com	r25
 9ae:	81 95       	neg	r24
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	08 95       	ret

000009b4 <__divmodhi4_neg2>:
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255

000009ba <__divmodhi4_exit>:
 9ba:	08 95       	ret

000009bc <_exit>:
 9bc:	f8 94       	cli

000009be <__stop_program>:
 9be:	ff cf       	rjmp	.-2      	; 0x9be <__stop_program>

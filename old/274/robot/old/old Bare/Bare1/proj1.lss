
proj1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000ac0  00000b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003e  00800118  00800118  00000b6c  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  00000b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fc2  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003be6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00003bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b68  00000000  00000000  00003c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000425  00000000  00000000  000047e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000002b1  00000000  00000000  00004c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001d4  00000000  00000000  00004ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f4  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002e4  00000000  00000000  00005388  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  9e:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <printBuffer>:
			exit(1);
		}
	}
}

void printBuffer(char buf[]) {
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	ec 01       	movw	r28, r24
	int i;
	for(i = 0; i < strlen(buf); i++) {
  b0:	8c 01       	movw	r16, r24
  b2:	fe 01       	movw	r30, r28
  b4:	01 90       	ld	r0, Z+
  b6:	00 20       	and	r0, r0
  b8:	e9 f7       	brne	.-6      	; 0xb4 <printBuffer+0xe>
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	ec 1b       	sub	r30, r28
  be:	fd 0b       	sbc	r31, r29
  c0:	c8 01       	movw	r24, r16
  c2:	8c 1b       	sub	r24, r28
  c4:	9d 0b       	sbc	r25, r29
  c6:	8e 17       	cp	r24, r30
  c8:	9f 07       	cpc	r25, r31
  ca:	30 f4       	brcc	.+12     	; 0xd8 <printBuffer+0x32>
		byteTx(buf[i]);
  cc:	f8 01       	movw	r30, r16
  ce:	81 91       	ld	r24, Z+
  d0:	8f 01       	movw	r16, r30
  d2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  d6:	ed cf       	rjmp	.-38     	; 0xb2 <printBuffer+0xc>
	}
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	0f 91       	pop	r16
  e0:	08 95       	ret

000000e2 <defineSongs>:
#include "timer.h"

// Define songs to be played later
void defineSongs(void) {
  // Reset song
  byteTx(CmdSong);
  e2:	8c e8       	ldi	r24, 0x8C	; 140
  e4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(RESET_SONG);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(4);
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(60);
  f4:	8c e3       	ldi	r24, 0x3C	; 60
  f6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(6);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(72);
 100:	88 e4       	ldi	r24, 0x48	; 72
 102:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(6);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(84);
 10c:	84 e5       	ldi	r24, 0x54	; 84
 10e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(6);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(96);
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(6);
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>

  // Start song
  byteTx(CmdSong);
 124:	8c e8       	ldi	r24, 0x8C	; 140
 126:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(START_SONG);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(6);
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(69);
 136:	85 e4       	ldi	r24, 0x45	; 69
 138:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(18);
 13c:	82 e1       	ldi	r24, 0x12	; 18
 13e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(72);
 142:	88 e4       	ldi	r24, 0x48	; 72
 144:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(12);
 148:	8c e0       	ldi	r24, 0x0C	; 12
 14a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(74);
 14e:	8a e4       	ldi	r24, 0x4A	; 74
 150:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(12);
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(72);
 15a:	88 e4       	ldi	r24, 0x48	; 72
 15c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(12);
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(69);
 166:	85 e4       	ldi	r24, 0x45	; 69
 168:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(12);
 16c:	8c e0       	ldi	r24, 0x0C	; 12
 16e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(77);
 172:	8d e4       	ldi	r24, 0x4D	; 77
 174:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
  byteTx(24);
 178:	88 e1       	ldi	r24, 0x18	; 24
 17a:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <byteTx>

0000017e <powerOnRobot>:
}

// Ensure that the robot is On.
void powerOnRobot(void) {
  // If Create's power is off, turn it on
  if(!RobotIsOn) {
 17e:	1d 99       	sbic	0x03, 5	; 3
 180:	12 c0       	rjmp	.+36     	; 0x1a6 <powerOnRobot+0x28>
    while(!RobotIsOn) {
 182:	1d 99       	sbic	0x03, 5	; 3
 184:	0c c0       	rjmp	.+24     	; 0x19e <powerOnRobot+0x20>
      RobotPwrToggleLow;
 186:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 188:	84 ef       	ldi	r24, 0xF4	; 244
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 190:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 192:	84 e6       	ldi	r24, 0x64	; 100
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
      RobotPwrToggleLow;
 19a:	5f 98       	cbi	0x0b, 7	; 11
 19c:	f2 cf       	rjmp	.-28     	; 0x182 <powerOnRobot+0x4>
    }
    delayMs(3500);  // Delay for startup
 19e:	8c ea       	ldi	r24, 0xAC	; 172
 1a0:	9d e0       	ldi	r25, 0x0D	; 13
 1a2:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
  }

  // Flush the buffer
  while( (UCSR0A & 0x80) && UDR0);
 1a6:	80 91 c0 00 	lds	r24, 0x00C0
 1aa:	87 ff       	sbrs	r24, 7
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <powerOnRobot+0x38>
 1ae:	80 91 c6 00 	lds	r24, 0x00C6
 1b2:	81 11       	cpse	r24, r1
 1b4:	f8 cf       	rjmp	.-16     	; 0x1a6 <powerOnRobot+0x28>
 1b6:	08 95       	ret

000001b8 <powerOffRobot>:
}

// Ensure that the robot is OFF.
void powerOffRobot(void) {
  // If Create's power is on, turn it off
  if(RobotIsOn) {
 1b8:	1d 9b       	sbis	0x03, 5	; 3
 1ba:	08 95       	ret
    while(RobotIsOn) {
 1bc:	1d 9b       	sbis	0x03, 5	; 3
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <powerOffRobot+0x20>
      RobotPwrToggleLow;
 1c0:	5f 98       	cbi	0x0b, 7	; 11
      delayMs(500);  // Delay in this state
 1c2:	84 ef       	ldi	r24, 0xF4	; 244
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
      RobotPwrToggleHigh;  // Low to high transition to toggle power
 1ca:	5f 9a       	sbi	0x0b, 7	; 11
      delayMs(100);  // Delay in this state
 1cc:	84 e6       	ldi	r24, 0x64	; 100
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
      RobotPwrToggleLow;
 1d4:	5f 98       	cbi	0x0b, 7	; 11
 1d6:	f2 cf       	rjmp	.-28     	; 0x1bc <powerOffRobot+0x4>
 1d8:	08 95       	ret

000001da <__vector_18>:
volatile uint8_t  delayTimerRunning = 0;          // Definition checked against declaration
volatile uint8_t canPrint=0;
volatile uint16_t senseTimerCount=100;
volatile uint8_t canSense=0;

ISR(USART_RX_vect) {  //SIGNAL(SIG_USART_RECV) 
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
  
  // CSCE 274 students, I have only ever used this method 
  // when retrieving/storing a large amount of sensor data. 
  // You DO NOT need it for this assignment. If i feel it 
  // becomes relevant, I will show you how/when to use it.
}
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_14>:

//SIGNAL(SIG_OUTPUT_COMPARE1A)
ISR(TIMER0_COMPA_vect) {
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
  // Interrupt handler called every 1ms.
  // Decrement the counter variable, to allow delayMs to keep time.
  if(delayTimerCount != 0) {
 1fc:	80 91 1d 01 	lds	r24, 0x011D
 200:	90 91 1e 01 	lds	r25, 0x011E
 204:	89 2b       	or	r24, r25
 206:	51 f0       	breq	.+20     	; 0x21c <__vector_14+0x2e>
    delayTimerCount--;
 208:	80 91 1d 01 	lds	r24, 0x011D
 20c:	90 91 1e 01 	lds	r25, 0x011E
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	90 93 1e 01 	sts	0x011E, r25
 216:	80 93 1d 01 	sts	0x011D, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__vector_14+0x32>
  } else {
    delayTimerRunning = 0;
 21c:	10 92 1c 01 	sts	0x011C, r1
  }

  if(senseTimerCount !=0) {
 220:	80 91 06 01 	lds	r24, 0x0106
 224:	90 91 07 01 	lds	r25, 0x0107
 228:	89 2b       	or	r24, r25
 22a:	51 f0       	breq	.+20     	; 0x240 <__vector_14+0x52>
    senseTimerCount--;
 22c:	80 91 06 01 	lds	r24, 0x0106
 230:	90 91 07 01 	lds	r25, 0x0107
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	90 93 07 01 	sts	0x0107, r25
 23a:	80 93 06 01 	sts	0x0106, r24
 23e:	03 c0       	rjmp	.+6      	; 0x246 <__vector_14+0x58>
  } else {
    canSense =1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 1a 01 	sts	0x011A, r24
  }
}
 246:	9f 91       	pop	r25
 248:	8f 91       	pop	r24
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
  canPrint=1;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 1b 01 	sts	0x011B, r24
}
 266:	8f 91       	pop	r24
 268:	0f 90       	pop	r0
 26a:	0f be       	out	0x3f, r0	; 63
 26c:	0f 90       	pop	r0
 26e:	1f 90       	pop	r1
 270:	18 95       	reti

00000272 <setupTimer>:

void setupTimer(void) {
// Set up the timer 1 interupt to be called every 1ms.
// It's probably best to treat this as a black box.
  TCCR0A = _BV(WGM01);
 272:	22 e0       	ldi	r18, 0x02	; 2
 274:	24 bd       	out	0x24, r18	; 36
  TCCR0B = (_BV(CS00) | _BV(CS02));
 276:	85 e0       	ldi	r24, 0x05	; 5
 278:	85 bd       	out	0x25, r24	; 37
    // TCCR1B = 0x0C;
  OCR0A = 17;
 27a:	81 e1       	ldi	r24, 0x11	; 17
 27c:	87 bd       	out	0x27, r24	; 39
  TIMSK0 = _BV(OCIE0A);
 27e:	20 93 6e 00 	sts	0x006E, r18
    // TIMSK1 = 0x02;

  // Timer 1 setup
  TCCR1A = 0x00;
 282:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (_BV(WGM12) | _BV(CS10) | _BV(CS12));
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	80 93 81 00 	sts	0x0081, r24
    // TCCR1B = 0x0C;
  OCR1A = 17999;
 28c:	8f e4       	ldi	r24, 0x4F	; 79
 28e:	96 e4       	ldi	r25, 0x46	; 70
 290:	90 93 89 00 	sts	0x0089, r25
 294:	80 93 88 00 	sts	0x0088, r24
  TIMSK1 = _BV(OCIE1A);
 298:	20 93 6f 00 	sts	0x006F, r18
 29c:	08 95       	ret

0000029e <delayMs>:
}

// Delay for the specified time in ms without updating sensor values
void delayMs(uint16_t time_ms)
{
  delayTimerRunning = 1;
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	20 93 1c 01 	sts	0x011C, r18
  delayTimerCount = time_ms;
 2a4:	90 93 1e 01 	sts	0x011E, r25
 2a8:	80 93 1d 01 	sts	0x011D, r24
  while(delayTimerRunning) ;
 2ac:	80 91 1c 01 	lds	r24, 0x011C
 2b0:	81 11       	cpse	r24, r1
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <delayMs+0xe>
}
 2b4:	08 95       	ret

000002b6 <setupIOPins>:
  sei();
}

void setupIOPins(void) {
  // Set I/O pins
  DDRB  = 0x10;
 2b6:	80 e1       	ldi	r24, 0x10	; 16
 2b8:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xCF;
 2ba:	8f ec       	ldi	r24, 0xCF	; 207
 2bc:	85 b9       	out	0x05, r24	; 5
  DDRC  = 0x00;
 2be:	17 b8       	out	0x07, r1	; 7
  PORTC = 0xFF;
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	88 b9       	out	0x08, r24	; 8
  DDRD  = 0xE6;
 2c4:	86 ee       	ldi	r24, 0xE6	; 230
 2c6:	8a b9       	out	0x0a, r24	; 10
  PORTD = 0x7D;
 2c8:	8d e7       	ldi	r24, 0x7D	; 125
 2ca:	8b b9       	out	0x0b, r24	; 11
 2cc:	08 95       	ret

000002ce <setupSerialPort>:
}

void setupSerialPort(void) {
  // Set the transmission speed to 57600 baud, which is what the Create expects,
  // unless we tell it otherwise.
  UBRR0 = 19;
 2ce:	83 e1       	ldi	r24, 0x13	; 19
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 c5 00 	sts	0x00C5, r25
 2d6:	80 93 c4 00 	sts	0x00C4, r24
  
  // Enable both transmit and receive.
  UCSR0B = (_BV(RXCIE0) | _BV(TXEN0) | _BV(RXEN0));
 2da:	88 e9       	ldi	r24, 0x98	; 152
 2dc:	80 93 c1 00 	sts	0x00C1, r24
    // UCSR0B = 0x18;
  
  // Set 8-bit data.
  UCSR0C = (_BV(UCSZ00) | _BV(UCSZ01));
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	80 93 c2 00 	sts	0x00C2, r24
 2e6:	08 95       	ret

000002e8 <initializeCommandModule>:
#include "oi.h"
#include "timer.h"

void initializeCommandModule(void){
  // Disable interrupts. ("Clear interrupt bit")
  cli();
 2e8:	f8 94       	cli

  // One-time setup operations.
  setupIOPins();
 2ea:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <setupIOPins>
  setupTimer();
 2ee:	0e 94 39 01 	call	0x272	; 0x272 <setupTimer>
  setupSerialPort();
 2f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <setupSerialPort>

  // Enable interrupts. ("Set interrupt bit")
  sei();
 2f6:	78 94       	sei
 2f8:	08 95       	ret

000002fa <byteTx>:
}

void byteTx(uint8_t value) {
  // Transmit one byte to the robot.
  // Wait for the buffer to be empty.
  while(!(UCSR0A & 0x20)) ;
 2fa:	90 91 c0 00 	lds	r25, 0x00C0
 2fe:	95 ff       	sbrs	r25, 5
 300:	fc cf       	rjmp	.-8      	; 0x2fa <byteTx>

  // Send the byte.
  UDR0 = value;
 302:	80 93 c6 00 	sts	0x00C6, r24
 306:	08 95       	ret

00000308 <byteRx>:

uint8_t byteRx(void) {
  // Receive one byte from the robot.
  // Call setupSerialPort() first.
  // Wait for a byte to arrive in the recieve buffer.
  while(!(UCSR0A & 0x80)) ;
 308:	80 91 c0 00 	lds	r24, 0x00C0
 30c:	87 ff       	sbrs	r24, 7
 30e:	fc cf       	rjmp	.-8      	; 0x308 <byteRx>
  
  // Return that byte.
  return UDR0;
 310:	80 91 c6 00 	lds	r24, 0x00C6
}
 314:	08 95       	ret

00000316 <baud>:

void baud(uint8_t baud_code) {
 316:	cf 93       	push	r28
 318:	c8 2f       	mov	r28, r24
  // Switch the baud rate on both Create and module
  if(baud_code <= 11)
 31a:	8c 30       	cpi	r24, 0x0C	; 12
 31c:	08 f0       	brcs	.+2      	; 0x320 <baud+0xa>
 31e:	53 c0       	rjmp	.+166    	; 0x3c6 <baud+0xb0>
  {
    byteTx(CmdBaud);
 320:	81 e8       	ldi	r24, 0x81	; 129
 322:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
    UCSR0A |= _BV(TXC0);
 326:	80 91 c0 00 	lds	r24, 0x00C0
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	80 93 c0 00 	sts	0x00C0, r24
    byteTx(baud_code);
 330:	8c 2f       	mov	r24, r28
 332:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
    // Wait until transmit is complete
    while(!(UCSR0A & _BV(TXC0))) ;
 336:	80 91 c0 00 	lds	r24, 0x00C0
 33a:	86 ff       	sbrs	r24, 6
 33c:	fc cf       	rjmp	.-8      	; 0x336 <baud+0x20>

    cli();
 33e:	f8 94       	cli

    // Switch the baud rate register
    if(baud_code == Baud115200) {
 340:	cb 30       	cpi	r28, 0x0B	; 11
 342:	19 f4       	brne	.+6      	; 0x34a <baud+0x34>
      UBRR0 = Ubrr115200;
 344:	89 e0       	ldi	r24, 0x09	; 9
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	34 c0       	rjmp	.+104    	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud57600) {
 34a:	ca 30       	cpi	r28, 0x0A	; 10
 34c:	19 f4       	brne	.+6      	; 0x354 <baud+0x3e>
      UBRR0 = Ubrr57600;
 34e:	83 e1       	ldi	r24, 0x13	; 19
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	2f c0       	rjmp	.+94     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud38400) {
 354:	c9 30       	cpi	r28, 0x09	; 9
 356:	19 f4       	brne	.+6      	; 0x35e <baud+0x48>
      UBRR0 = Ubrr38400;
 358:	8d e1       	ldi	r24, 0x1D	; 29
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	2a c0       	rjmp	.+84     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud28800) {
 35e:	c8 30       	cpi	r28, 0x08	; 8
 360:	19 f4       	brne	.+6      	; 0x368 <baud+0x52>
      UBRR0 = Ubrr28800;
 362:	87 e2       	ldi	r24, 0x27	; 39
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	25 c0       	rjmp	.+74     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud19200) {
 368:	c7 30       	cpi	r28, 0x07	; 7
 36a:	19 f4       	brne	.+6      	; 0x372 <baud+0x5c>
      UBRR0 = Ubrr19200;
 36c:	8b e3       	ldi	r24, 0x3B	; 59
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	20 c0       	rjmp	.+64     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud14400) {
 372:	c6 30       	cpi	r28, 0x06	; 6
 374:	19 f4       	brne	.+6      	; 0x37c <baud+0x66>
      UBRR0 = Ubrr14400;
 376:	8f e4       	ldi	r24, 0x4F	; 79
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	1b c0       	rjmp	.+54     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud9600) {
 37c:	c5 30       	cpi	r28, 0x05	; 5
 37e:	19 f4       	brne	.+6      	; 0x386 <baud+0x70>
      UBRR0 = Ubrr9600;
 380:	87 e7       	ldi	r24, 0x77	; 119
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud4800) {
 386:	c4 30       	cpi	r28, 0x04	; 4
 388:	19 f4       	brne	.+6      	; 0x390 <baud+0x7a>
      UBRR0 = Ubrr4800;
 38a:	8f ee       	ldi	r24, 0xEF	; 239
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	11 c0       	rjmp	.+34     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud2400) {
 390:	c3 30       	cpi	r28, 0x03	; 3
 392:	19 f4       	brne	.+6      	; 0x39a <baud+0x84>
      UBRR0 = Ubrr2400;
 394:	8f ed       	ldi	r24, 0xDF	; 223
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0c c0       	rjmp	.+24     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud1200) {
 39a:	c2 30       	cpi	r28, 0x02	; 2
 39c:	19 f4       	brne	.+6      	; 0x3a4 <baud+0x8e>
      UBRR0 = Ubrr1200;
 39e:	8f eb       	ldi	r24, 0xBF	; 191
 3a0:	93 e0       	ldi	r25, 0x03	; 3
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud600) {
 3a4:	c1 30       	cpi	r28, 0x01	; 1
 3a6:	19 f4       	brne	.+6      	; 0x3ae <baud+0x98>
      UBRR0 = Ubrr600;
 3a8:	8f e7       	ldi	r24, 0x7F	; 127
 3aa:	97 e0       	ldi	r25, 0x07	; 7
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <baud+0x9c>
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	9e e0       	ldi	r25, 0x0E	; 14
 3b2:	90 93 c5 00 	sts	0x00C5, r25
 3b6:	80 93 c4 00 	sts	0x00C4, r24
    }
    sei();
 3ba:	78 94       	sei

    delayMs(100);
 3bc:	84 e6       	ldi	r24, 0x64	; 100
 3be:	90 e0       	ldi	r25, 0x00	; 0
  }
}
 3c0:	cf 91       	pop	r28
    } else if(baud_code == Baud300) {
      UBRR0 = Ubrr300;
    }
    sei();

    delayMs(100);
 3c2:	0c 94 4f 01 	jmp	0x29e	; 0x29e <delayMs>
  }
}
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <setSerialDestination>:

void setSerialDestination(uint8_t  dest) {
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
// Which serial port should byteTx and byteRx talk to?
// Ensure any pending bytes have been sent. Without this, the last byte sent
// before calling this might seem to disappear.
delayMs (10);
 3ce:	8a e0       	ldi	r24, 0x0A	; 10
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
// Configure the port.
if (dest ==  SERIAL_CREATE) {
 3d6:	c1 30       	cpi	r28, 0x01	; 1
 3d8:	11 f4       	brne	.+4      	; 0x3de <setSerialDestination+0x14>
  PORTB  &= ~0x10;
 3da:	2c 98       	cbi	0x05, 4	; 5
 3dc:	01 c0       	rjmp	.+2      	; 0x3e0 <setSerialDestination+0x16>
}
else {
  PORTB  |= 0x10;
 3de:	2c 9a       	sbi	0x05, 4	; 5
}
// Wait a bit to let things get back to normal. According to the docs, this
// should be at least 10 times the amount of time needed to send one byte.
// This is less than 1 millisecond. We are using a much longer delay to be
// super extra sure.
delayMs (10);
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	90 e0       	ldi	r25, 0x00	; 0
}
 3e4:	cf 91       	pop	r28
}
// Wait a bit to let things get back to normal. According to the docs, this
// should be at least 10 times the amount of time needed to send one byte.
// This is less than 1 millisecond. We are using a much longer delay to be
// super extra sure.
delayMs (10);
 3e6:	0c 94 4f 01 	jmp	0x29e	; 0x29e <delayMs>

000003ea <main>:

// functions
int main(void);
void printBuffer(char buf[]);

int main(void) {
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	e2 97       	sbiw	r28, 0x32	; 50
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
	// Set up Create and module
	initializeCommandModule();
 3fe:	0e 94 74 01 	call	0x2e8	; 0x2e8 <initializeCommandModule>

	powerOnRobot();
 402:	0e 94 bf 00 	call	0x17e	; 0x17e <powerOnRobot>
	// Is the Robot on
	byteTx(CmdStart);
 406:	80 e8       	ldi	r24, 0x80	; 128
 408:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	// Start the create
	baud(Baud57600);
 40c:	8a e0       	ldi	r24, 0x0A	; 10
 40e:	0e 94 8b 01 	call	0x316	; 0x316 <baud>
	// Set the baud rate for the Create and Command Module
	defineSongs();
 412:	0e 94 71 00 	call	0xe2	; 0xe2 <defineSongs>
	// Define some songs so that we know the robot is on.
	byteTx(CmdControl);
 416:	82 e8       	ldi	r24, 0x82	; 130
 418:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	// Deprecated form of safe mode. I use it because it will
	// turn of all LEDs, so it's essentially a reset.
	byteTx(CmdFull);
 41c:	84 e8       	ldi	r24, 0x84	; 132
 41e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>

	// CSCE 274 students: I would make sure the robot stops. 
	//                    As a precaution for the robot and your grade.

	// Play the reset song and wait while it plays.
	byteTx(CmdPlay);
 422:	8d e8       	ldi	r24, 0x8D	; 141
 424:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	byteTx(RESET_SONG);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	delayMs(750);
 42e:	8e ee       	ldi	r24, 0xEE	; 238
 430:	92 e0       	ldi	r25, 0x02	; 2
 432:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>

	// Turn the power button on to something. I like red, but here is green.
	// CSCE 274 students: The following should (will) be a function that you write.
	byteTx(CmdLeds);
 436:	8b e8       	ldi	r24, 0x8B	; 139
 438:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	byteTx(0x00);
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	byteTx(0);
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	byteTx(255);
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
	void leftLEDoff(void) {
		PORTD |= 0x40;
	}

	// Initialize global variables
	DELAY=1000;
 44e:	88 ee       	ldi	r24, 0xE8	; 232
 450:	93 e0       	ldi	r25, 0x03	; 3
 452:	90 93 21 01 	sts	0x0121, r25
 456:	80 93 20 01 	sts	0x0120, r24
	notReadyBool=1; 
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	80 93 1f 01 	sts	0x011F, r24
			byteTx(6);   // send request for packet 0 
			for(i = 0; i < Sen6Size; i++){
				sensors[i] = byteRx();
			}  //read each sensor byte			
			sei();	
			senseTimerCount=100;		
 460:	24 e6       	ldi	r18, 0x64	; 100
 462:	a2 2e       	mov	r10, r18
 464:	b1 2c       	mov	r11, r1

		if(canPrint == 1) {	
			setSerialDestination(SERIAL_USB);
			cli();
			char buffer[50];			
			sprintf(buffer,"Cliff Left: %u\n", (uint16_t)((sensors[SenCliffLSig1] << 8)| sensors[SenCliffLSig0]));
 466:	38 e0       	ldi	r19, 0x08	; 8
 468:	c3 2e       	mov	r12, r19
 46a:	31 e0       	ldi	r19, 0x01	; 1
 46c:	d3 2e       	mov	r13, r19
 46e:	8e 01       	movw	r16, r28
 470:	0f 5f       	subi	r16, 0xFF	; 255
 472:	1f 4f       	sbci	r17, 0xFF	; 255



	// Infinite operation loop
	for(;;) {
		if(canSense==1){
 474:	80 91 1a 01 	lds	r24, 0x011A
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	e1 f4       	brne	.+56     	; 0x4b4 <main+0xca>
			cli();
 47c:	f8 94       	cli
		
			// flushRx()
			//while(UCSR0A & 0x80) // clear the receive buffer
			//  i = UDR0;
			
			byteTx(CmdSensors);  // sensor opcode 
 47e:	8e e8       	ldi	r24, 0x8E	; 142
 480:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
			byteTx(6);   // send request for packet 0 
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 7d 01 	call	0x2fa	; 0x2fa <byteTx>
 48a:	92 e2       	ldi	r25, 0x22	; 34
 48c:	e9 2e       	mov	r14, r25
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	f9 2e       	mov	r15, r25
			for(i = 0; i < Sen6Size; i++){
				sensors[i] = byteRx();
 492:	0e 94 84 01 	call	0x308	; 0x308 <byteRx>
 496:	f7 01       	movw	r30, r14
 498:	81 93       	st	Z+, r24
 49a:	7f 01       	movw	r14, r30
			//while(UCSR0A & 0x80) // clear the receive buffer
			//  i = UDR0;
			
			byteTx(CmdSensors);  // sensor opcode 
			byteTx(6);   // send request for packet 0 
			for(i = 0; i < Sen6Size; i++){
 49c:	f6 e5       	ldi	r31, 0x56	; 86
 49e:	ef 16       	cp	r14, r31
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	ff 06       	cpc	r15, r31
 4a4:	b1 f7       	brne	.-20     	; 0x492 <main+0xa8>
				sensors[i] = byteRx();
			}  //read each sensor byte			
			sei();	
 4a6:	78 94       	sei
			senseTimerCount=100;		
 4a8:	b0 92 07 01 	sts	0x0107, r11
 4ac:	a0 92 06 01 	sts	0x0106, r10
			canSense=0;		
 4b0:	10 92 1a 01 	sts	0x011A, r1
		}


		if(canPrint == 1) {	
 4b4:	80 91 1b 01 	lds	r24, 0x011B
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	19 f5       	brne	.+70     	; 0x502 <__stack+0x3>
			setSerialDestination(SERIAL_USB);
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	0e 94 e5 01 	call	0x3ca	; 0x3ca <setSerialDestination>
			cli();
 4c2:	f8 94       	cli
			char buffer[50];			
			sprintf(buffer,"Cliff Left: %u\n", (uint16_t)((sensors[SenCliffLSig1] << 8)| sensors[SenCliffLSig0]));
 4c4:	20 91 3e 01 	lds	r18, 0x013E
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	32 2f       	mov	r19, r18
 4cc:	22 27       	eor	r18, r18
 4ce:	80 91 3f 01 	lds	r24, 0x013F
 4d2:	28 2b       	or	r18, r24
 4d4:	3f 93       	push	r19
 4d6:	2f 93       	push	r18
 4d8:	df 92       	push	r13
 4da:	cf 92       	push	r12
 4dc:	1f 93       	push	r17
 4de:	0f 93       	push	r16
 4e0:	0e 94 8d 02 	call	0x51a	; 0x51a <sprintf>
			printBuffer(buffer);
 4e4:	c8 01       	movw	r24, r16
 4e6:	0e 94 53 00 	call	0xa6	; 0xa6 <printBuffer>
			sei();			
 4ea:	78 94       	sei
			setSerialDestination(SERIAL_CREATE);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <setSerialDestination>
			canPrint=0;
 4f2:	10 92 1b 01 	sts	0x011B, r1
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
		}
		delayMs(15);
 502:	8f e0       	ldi	r24, 0x0F	; 15
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 4f 01 	call	0x29e	; 0x29e <delayMs>
		if(UserButtonPressed) {
 50a:	4c 99       	sbic	0x09, 4	; 9
 50c:	b3 cf       	rjmp	.-154    	; 0x474 <main+0x8a>
			powerOffRobot();
 50e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <powerOffRobot>
			exit(1);
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 5e 05 	call	0xabc	; 0xabc <_exit>

0000051a <sprintf>:
 51a:	ae e0       	ldi	r26, 0x0E	; 14
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e3 e9       	ldi	r30, 0x93	; 147
 520:	f2 e0       	ldi	r31, 0x02	; 2
 522:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__prologue_saves__+0x1c>
 526:	0d 89       	ldd	r16, Y+21	; 0x15
 528:	1e 89       	ldd	r17, Y+22	; 0x16
 52a:	86 e0       	ldi	r24, 0x06	; 6
 52c:	8c 83       	std	Y+4, r24	; 0x04
 52e:	1a 83       	std	Y+2, r17	; 0x02
 530:	09 83       	std	Y+1, r16	; 0x01
 532:	8f ef       	ldi	r24, 0xFF	; 255
 534:	9f e7       	ldi	r25, 0x7F	; 127
 536:	9e 83       	std	Y+6, r25	; 0x06
 538:	8d 83       	std	Y+5, r24	; 0x05
 53a:	ae 01       	movw	r20, r28
 53c:	47 5e       	subi	r20, 0xE7	; 231
 53e:	5f 4f       	sbci	r21, 0xFF	; 255
 540:	6f 89       	ldd	r22, Y+23	; 0x17
 542:	78 8d       	ldd	r23, Y+24	; 0x18
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	0e 94 af 02 	call	0x55e	; 0x55e <vfprintf>
 54c:	ef 81       	ldd	r30, Y+7	; 0x07
 54e:	f8 85       	ldd	r31, Y+8	; 0x08
 550:	e0 0f       	add	r30, r16
 552:	f1 1f       	adc	r31, r17
 554:	10 82       	st	Z, r1
 556:	2e 96       	adiw	r28, 0x0e	; 14
 558:	e4 e0       	ldi	r30, 0x04	; 4
 55a:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__epilogue_restores__+0x1c>

0000055e <vfprintf>:
 55e:	ac e0       	ldi	r26, 0x0C	; 12
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e5 eb       	ldi	r30, 0xB5	; 181
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__prologue_saves__>
 56a:	7c 01       	movw	r14, r24
 56c:	6b 01       	movw	r12, r22
 56e:	8a 01       	movw	r16, r20
 570:	fc 01       	movw	r30, r24
 572:	17 82       	std	Z+7, r1	; 0x07
 574:	16 82       	std	Z+6, r1	; 0x06
 576:	83 81       	ldd	r24, Z+3	; 0x03
 578:	81 ff       	sbrs	r24, 1
 57a:	bd c1       	rjmp	.+890    	; 0x8f6 <vfprintf+0x398>
 57c:	ce 01       	movw	r24, r28
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	4c 01       	movw	r8, r24
 582:	f7 01       	movw	r30, r14
 584:	93 81       	ldd	r25, Z+3	; 0x03
 586:	f6 01       	movw	r30, r12
 588:	93 fd       	sbrc	r25, 3
 58a:	85 91       	lpm	r24, Z+
 58c:	93 ff       	sbrs	r25, 3
 58e:	81 91       	ld	r24, Z+
 590:	6f 01       	movw	r12, r30
 592:	88 23       	and	r24, r24
 594:	09 f4       	brne	.+2      	; 0x598 <vfprintf+0x3a>
 596:	ab c1       	rjmp	.+854    	; 0x8ee <vfprintf+0x390>
 598:	85 32       	cpi	r24, 0x25	; 37
 59a:	39 f4       	brne	.+14     	; 0x5aa <vfprintf+0x4c>
 59c:	93 fd       	sbrc	r25, 3
 59e:	85 91       	lpm	r24, Z+
 5a0:	93 ff       	sbrs	r25, 3
 5a2:	81 91       	ld	r24, Z+
 5a4:	6f 01       	movw	r12, r30
 5a6:	85 32       	cpi	r24, 0x25	; 37
 5a8:	29 f4       	brne	.+10     	; 0x5b4 <vfprintf+0x56>
 5aa:	b7 01       	movw	r22, r14
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 5b2:	e7 cf       	rjmp	.-50     	; 0x582 <vfprintf+0x24>
 5b4:	51 2c       	mov	r5, r1
 5b6:	31 2c       	mov	r3, r1
 5b8:	20 e0       	ldi	r18, 0x00	; 0
 5ba:	20 32       	cpi	r18, 0x20	; 32
 5bc:	a0 f4       	brcc	.+40     	; 0x5e6 <vfprintf+0x88>
 5be:	8b 32       	cpi	r24, 0x2B	; 43
 5c0:	69 f0       	breq	.+26     	; 0x5dc <vfprintf+0x7e>
 5c2:	30 f4       	brcc	.+12     	; 0x5d0 <vfprintf+0x72>
 5c4:	80 32       	cpi	r24, 0x20	; 32
 5c6:	59 f0       	breq	.+22     	; 0x5de <vfprintf+0x80>
 5c8:	83 32       	cpi	r24, 0x23	; 35
 5ca:	69 f4       	brne	.+26     	; 0x5e6 <vfprintf+0x88>
 5cc:	20 61       	ori	r18, 0x10	; 16
 5ce:	2c c0       	rjmp	.+88     	; 0x628 <vfprintf+0xca>
 5d0:	8d 32       	cpi	r24, 0x2D	; 45
 5d2:	39 f0       	breq	.+14     	; 0x5e2 <vfprintf+0x84>
 5d4:	80 33       	cpi	r24, 0x30	; 48
 5d6:	39 f4       	brne	.+14     	; 0x5e6 <vfprintf+0x88>
 5d8:	21 60       	ori	r18, 0x01	; 1
 5da:	26 c0       	rjmp	.+76     	; 0x628 <vfprintf+0xca>
 5dc:	22 60       	ori	r18, 0x02	; 2
 5de:	24 60       	ori	r18, 0x04	; 4
 5e0:	23 c0       	rjmp	.+70     	; 0x628 <vfprintf+0xca>
 5e2:	28 60       	ori	r18, 0x08	; 8
 5e4:	21 c0       	rjmp	.+66     	; 0x628 <vfprintf+0xca>
 5e6:	27 fd       	sbrc	r18, 7
 5e8:	27 c0       	rjmp	.+78     	; 0x638 <vfprintf+0xda>
 5ea:	30 ed       	ldi	r19, 0xD0	; 208
 5ec:	38 0f       	add	r19, r24
 5ee:	3a 30       	cpi	r19, 0x0A	; 10
 5f0:	78 f4       	brcc	.+30     	; 0x610 <vfprintf+0xb2>
 5f2:	26 ff       	sbrs	r18, 6
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <vfprintf+0xa4>
 5f6:	fa e0       	ldi	r31, 0x0A	; 10
 5f8:	5f 9e       	mul	r5, r31
 5fa:	30 0d       	add	r19, r0
 5fc:	11 24       	eor	r1, r1
 5fe:	53 2e       	mov	r5, r19
 600:	13 c0       	rjmp	.+38     	; 0x628 <vfprintf+0xca>
 602:	8a e0       	ldi	r24, 0x0A	; 10
 604:	38 9e       	mul	r3, r24
 606:	30 0d       	add	r19, r0
 608:	11 24       	eor	r1, r1
 60a:	33 2e       	mov	r3, r19
 60c:	20 62       	ori	r18, 0x20	; 32
 60e:	0c c0       	rjmp	.+24     	; 0x628 <vfprintf+0xca>
 610:	8e 32       	cpi	r24, 0x2E	; 46
 612:	21 f4       	brne	.+8      	; 0x61c <vfprintf+0xbe>
 614:	26 fd       	sbrc	r18, 6
 616:	6b c1       	rjmp	.+726    	; 0x8ee <vfprintf+0x390>
 618:	20 64       	ori	r18, 0x40	; 64
 61a:	06 c0       	rjmp	.+12     	; 0x628 <vfprintf+0xca>
 61c:	8c 36       	cpi	r24, 0x6C	; 108
 61e:	11 f4       	brne	.+4      	; 0x624 <vfprintf+0xc6>
 620:	20 68       	ori	r18, 0x80	; 128
 622:	02 c0       	rjmp	.+4      	; 0x628 <vfprintf+0xca>
 624:	88 36       	cpi	r24, 0x68	; 104
 626:	41 f4       	brne	.+16     	; 0x638 <vfprintf+0xda>
 628:	f6 01       	movw	r30, r12
 62a:	93 fd       	sbrc	r25, 3
 62c:	85 91       	lpm	r24, Z+
 62e:	93 ff       	sbrs	r25, 3
 630:	81 91       	ld	r24, Z+
 632:	6f 01       	movw	r12, r30
 634:	81 11       	cpse	r24, r1
 636:	c1 cf       	rjmp	.-126    	; 0x5ba <vfprintf+0x5c>
 638:	98 2f       	mov	r25, r24
 63a:	9f 7d       	andi	r25, 0xDF	; 223
 63c:	95 54       	subi	r25, 0x45	; 69
 63e:	93 30       	cpi	r25, 0x03	; 3
 640:	28 f4       	brcc	.+10     	; 0x64c <vfprintf+0xee>
 642:	0c 5f       	subi	r16, 0xFC	; 252
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	ff e3       	ldi	r31, 0x3F	; 63
 648:	f9 83       	std	Y+1, r31	; 0x01
 64a:	0d c0       	rjmp	.+26     	; 0x666 <vfprintf+0x108>
 64c:	83 36       	cpi	r24, 0x63	; 99
 64e:	31 f0       	breq	.+12     	; 0x65c <vfprintf+0xfe>
 650:	83 37       	cpi	r24, 0x73	; 115
 652:	71 f0       	breq	.+28     	; 0x670 <vfprintf+0x112>
 654:	83 35       	cpi	r24, 0x53	; 83
 656:	09 f0       	breq	.+2      	; 0x65a <vfprintf+0xfc>
 658:	5b c0       	rjmp	.+182    	; 0x710 <vfprintf+0x1b2>
 65a:	22 c0       	rjmp	.+68     	; 0x6a0 <vfprintf+0x142>
 65c:	f8 01       	movw	r30, r16
 65e:	80 81       	ld	r24, Z
 660:	89 83       	std	Y+1, r24	; 0x01
 662:	0e 5f       	subi	r16, 0xFE	; 254
 664:	1f 4f       	sbci	r17, 0xFF	; 255
 666:	44 24       	eor	r4, r4
 668:	43 94       	inc	r4
 66a:	51 2c       	mov	r5, r1
 66c:	54 01       	movw	r10, r8
 66e:	15 c0       	rjmp	.+42     	; 0x69a <vfprintf+0x13c>
 670:	38 01       	movw	r6, r16
 672:	f2 e0       	ldi	r31, 0x02	; 2
 674:	6f 0e       	add	r6, r31
 676:	71 1c       	adc	r7, r1
 678:	f8 01       	movw	r30, r16
 67a:	a0 80       	ld	r10, Z
 67c:	b1 80       	ldd	r11, Z+1	; 0x01
 67e:	26 ff       	sbrs	r18, 6
 680:	03 c0       	rjmp	.+6      	; 0x688 <vfprintf+0x12a>
 682:	65 2d       	mov	r22, r5
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <vfprintf+0x12e>
 688:	6f ef       	ldi	r22, 0xFF	; 255
 68a:	7f ef       	ldi	r23, 0xFF	; 255
 68c:	c5 01       	movw	r24, r10
 68e:	2c 87       	std	Y+12, r18	; 0x0c
 690:	0e 94 8c 04 	call	0x918	; 0x918 <strnlen>
 694:	2c 01       	movw	r4, r24
 696:	83 01       	movw	r16, r6
 698:	2c 85       	ldd	r18, Y+12	; 0x0c
 69a:	2f 77       	andi	r18, 0x7F	; 127
 69c:	22 2e       	mov	r2, r18
 69e:	17 c0       	rjmp	.+46     	; 0x6ce <vfprintf+0x170>
 6a0:	38 01       	movw	r6, r16
 6a2:	f2 e0       	ldi	r31, 0x02	; 2
 6a4:	6f 0e       	add	r6, r31
 6a6:	71 1c       	adc	r7, r1
 6a8:	f8 01       	movw	r30, r16
 6aa:	a0 80       	ld	r10, Z
 6ac:	b1 80       	ldd	r11, Z+1	; 0x01
 6ae:	26 ff       	sbrs	r18, 6
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <vfprintf+0x15a>
 6b2:	65 2d       	mov	r22, r5
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <vfprintf+0x15e>
 6b8:	6f ef       	ldi	r22, 0xFF	; 255
 6ba:	7f ef       	ldi	r23, 0xFF	; 255
 6bc:	c5 01       	movw	r24, r10
 6be:	2c 87       	std	Y+12, r18	; 0x0c
 6c0:	0e 94 81 04 	call	0x902	; 0x902 <strnlen_P>
 6c4:	2c 01       	movw	r4, r24
 6c6:	2c 85       	ldd	r18, Y+12	; 0x0c
 6c8:	20 68       	ori	r18, 0x80	; 128
 6ca:	22 2e       	mov	r2, r18
 6cc:	83 01       	movw	r16, r6
 6ce:	23 fc       	sbrc	r2, 3
 6d0:	1b c0       	rjmp	.+54     	; 0x708 <vfprintf+0x1aa>
 6d2:	83 2d       	mov	r24, r3
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	48 16       	cp	r4, r24
 6d8:	59 06       	cpc	r5, r25
 6da:	b0 f4       	brcc	.+44     	; 0x708 <vfprintf+0x1aa>
 6dc:	b7 01       	movw	r22, r14
 6de:	80 e2       	ldi	r24, 0x20	; 32
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 6e6:	3a 94       	dec	r3
 6e8:	f4 cf       	rjmp	.-24     	; 0x6d2 <vfprintf+0x174>
 6ea:	f5 01       	movw	r30, r10
 6ec:	27 fc       	sbrc	r2, 7
 6ee:	85 91       	lpm	r24, Z+
 6f0:	27 fe       	sbrs	r2, 7
 6f2:	81 91       	ld	r24, Z+
 6f4:	5f 01       	movw	r10, r30
 6f6:	b7 01       	movw	r22, r14
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 6fe:	31 10       	cpse	r3, r1
 700:	3a 94       	dec	r3
 702:	f1 e0       	ldi	r31, 0x01	; 1
 704:	4f 1a       	sub	r4, r31
 706:	51 08       	sbc	r5, r1
 708:	41 14       	cp	r4, r1
 70a:	51 04       	cpc	r5, r1
 70c:	71 f7       	brne	.-36     	; 0x6ea <vfprintf+0x18c>
 70e:	e5 c0       	rjmp	.+458    	; 0x8da <vfprintf+0x37c>
 710:	84 36       	cpi	r24, 0x64	; 100
 712:	11 f0       	breq	.+4      	; 0x718 <vfprintf+0x1ba>
 714:	89 36       	cpi	r24, 0x69	; 105
 716:	39 f5       	brne	.+78     	; 0x766 <vfprintf+0x208>
 718:	f8 01       	movw	r30, r16
 71a:	27 ff       	sbrs	r18, 7
 71c:	07 c0       	rjmp	.+14     	; 0x72c <vfprintf+0x1ce>
 71e:	60 81       	ld	r22, Z
 720:	71 81       	ldd	r23, Z+1	; 0x01
 722:	82 81       	ldd	r24, Z+2	; 0x02
 724:	93 81       	ldd	r25, Z+3	; 0x03
 726:	0c 5f       	subi	r16, 0xFC	; 252
 728:	1f 4f       	sbci	r17, 0xFF	; 255
 72a:	08 c0       	rjmp	.+16     	; 0x73c <vfprintf+0x1de>
 72c:	60 81       	ld	r22, Z
 72e:	71 81       	ldd	r23, Z+1	; 0x01
 730:	88 27       	eor	r24, r24
 732:	77 fd       	sbrc	r23, 7
 734:	80 95       	com	r24
 736:	98 2f       	mov	r25, r24
 738:	0e 5f       	subi	r16, 0xFE	; 254
 73a:	1f 4f       	sbci	r17, 0xFF	; 255
 73c:	2f 76       	andi	r18, 0x6F	; 111
 73e:	b2 2e       	mov	r11, r18
 740:	97 ff       	sbrs	r25, 7
 742:	09 c0       	rjmp	.+18     	; 0x756 <vfprintf+0x1f8>
 744:	90 95       	com	r25
 746:	80 95       	com	r24
 748:	70 95       	com	r23
 74a:	61 95       	neg	r22
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
 74e:	8f 4f       	sbci	r24, 0xFF	; 255
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	20 68       	ori	r18, 0x80	; 128
 754:	b2 2e       	mov	r11, r18
 756:	2a e0       	ldi	r18, 0x0A	; 10
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	a4 01       	movw	r20, r8
 75c:	0e 94 c9 04 	call	0x992	; 0x992 <__ultoa_invert>
 760:	a8 2e       	mov	r10, r24
 762:	a8 18       	sub	r10, r8
 764:	44 c0       	rjmp	.+136    	; 0x7ee <vfprintf+0x290>
 766:	85 37       	cpi	r24, 0x75	; 117
 768:	29 f4       	brne	.+10     	; 0x774 <vfprintf+0x216>
 76a:	2f 7e       	andi	r18, 0xEF	; 239
 76c:	b2 2e       	mov	r11, r18
 76e:	2a e0       	ldi	r18, 0x0A	; 10
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	25 c0       	rjmp	.+74     	; 0x7be <vfprintf+0x260>
 774:	f2 2f       	mov	r31, r18
 776:	f9 7f       	andi	r31, 0xF9	; 249
 778:	bf 2e       	mov	r11, r31
 77a:	8f 36       	cpi	r24, 0x6F	; 111
 77c:	c1 f0       	breq	.+48     	; 0x7ae <vfprintf+0x250>
 77e:	18 f4       	brcc	.+6      	; 0x786 <vfprintf+0x228>
 780:	88 35       	cpi	r24, 0x58	; 88
 782:	79 f0       	breq	.+30     	; 0x7a2 <vfprintf+0x244>
 784:	b4 c0       	rjmp	.+360    	; 0x8ee <vfprintf+0x390>
 786:	80 37       	cpi	r24, 0x70	; 112
 788:	19 f0       	breq	.+6      	; 0x790 <vfprintf+0x232>
 78a:	88 37       	cpi	r24, 0x78	; 120
 78c:	21 f0       	breq	.+8      	; 0x796 <vfprintf+0x238>
 78e:	af c0       	rjmp	.+350    	; 0x8ee <vfprintf+0x390>
 790:	2f 2f       	mov	r18, r31
 792:	20 61       	ori	r18, 0x10	; 16
 794:	b2 2e       	mov	r11, r18
 796:	b4 fe       	sbrs	r11, 4
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <vfprintf+0x256>
 79a:	8b 2d       	mov	r24, r11
 79c:	84 60       	ori	r24, 0x04	; 4
 79e:	b8 2e       	mov	r11, r24
 7a0:	09 c0       	rjmp	.+18     	; 0x7b4 <vfprintf+0x256>
 7a2:	24 ff       	sbrs	r18, 4
 7a4:	0a c0       	rjmp	.+20     	; 0x7ba <vfprintf+0x25c>
 7a6:	9f 2f       	mov	r25, r31
 7a8:	96 60       	ori	r25, 0x06	; 6
 7aa:	b9 2e       	mov	r11, r25
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <vfprintf+0x25c>
 7ae:	28 e0       	ldi	r18, 0x08	; 8
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	05 c0       	rjmp	.+10     	; 0x7be <vfprintf+0x260>
 7b4:	20 e1       	ldi	r18, 0x10	; 16
 7b6:	30 e0       	ldi	r19, 0x00	; 0
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0x260>
 7ba:	20 e1       	ldi	r18, 0x10	; 16
 7bc:	32 e0       	ldi	r19, 0x02	; 2
 7be:	f8 01       	movw	r30, r16
 7c0:	b7 fe       	sbrs	r11, 7
 7c2:	07 c0       	rjmp	.+14     	; 0x7d2 <vfprintf+0x274>
 7c4:	60 81       	ld	r22, Z
 7c6:	71 81       	ldd	r23, Z+1	; 0x01
 7c8:	82 81       	ldd	r24, Z+2	; 0x02
 7ca:	93 81       	ldd	r25, Z+3	; 0x03
 7cc:	0c 5f       	subi	r16, 0xFC	; 252
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	06 c0       	rjmp	.+12     	; 0x7de <vfprintf+0x280>
 7d2:	60 81       	ld	r22, Z
 7d4:	71 81       	ldd	r23, Z+1	; 0x01
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 5f       	subi	r16, 0xFE	; 254
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	a4 01       	movw	r20, r8
 7e0:	0e 94 c9 04 	call	0x992	; 0x992 <__ultoa_invert>
 7e4:	a8 2e       	mov	r10, r24
 7e6:	a8 18       	sub	r10, r8
 7e8:	fb 2d       	mov	r31, r11
 7ea:	ff 77       	andi	r31, 0x7F	; 127
 7ec:	bf 2e       	mov	r11, r31
 7ee:	b6 fe       	sbrs	r11, 6
 7f0:	0b c0       	rjmp	.+22     	; 0x808 <vfprintf+0x2aa>
 7f2:	2b 2d       	mov	r18, r11
 7f4:	2e 7f       	andi	r18, 0xFE	; 254
 7f6:	a5 14       	cp	r10, r5
 7f8:	50 f4       	brcc	.+20     	; 0x80e <vfprintf+0x2b0>
 7fa:	b4 fe       	sbrs	r11, 4
 7fc:	0a c0       	rjmp	.+20     	; 0x812 <vfprintf+0x2b4>
 7fe:	b2 fc       	sbrc	r11, 2
 800:	08 c0       	rjmp	.+16     	; 0x812 <vfprintf+0x2b4>
 802:	2b 2d       	mov	r18, r11
 804:	2e 7e       	andi	r18, 0xEE	; 238
 806:	05 c0       	rjmp	.+10     	; 0x812 <vfprintf+0x2b4>
 808:	7a 2c       	mov	r7, r10
 80a:	2b 2d       	mov	r18, r11
 80c:	03 c0       	rjmp	.+6      	; 0x814 <vfprintf+0x2b6>
 80e:	7a 2c       	mov	r7, r10
 810:	01 c0       	rjmp	.+2      	; 0x814 <vfprintf+0x2b6>
 812:	75 2c       	mov	r7, r5
 814:	24 ff       	sbrs	r18, 4
 816:	0d c0       	rjmp	.+26     	; 0x832 <vfprintf+0x2d4>
 818:	fe 01       	movw	r30, r28
 81a:	ea 0d       	add	r30, r10
 81c:	f1 1d       	adc	r31, r1
 81e:	80 81       	ld	r24, Z
 820:	80 33       	cpi	r24, 0x30	; 48
 822:	11 f4       	brne	.+4      	; 0x828 <vfprintf+0x2ca>
 824:	29 7e       	andi	r18, 0xE9	; 233
 826:	09 c0       	rjmp	.+18     	; 0x83a <vfprintf+0x2dc>
 828:	22 ff       	sbrs	r18, 2
 82a:	06 c0       	rjmp	.+12     	; 0x838 <vfprintf+0x2da>
 82c:	73 94       	inc	r7
 82e:	73 94       	inc	r7
 830:	04 c0       	rjmp	.+8      	; 0x83a <vfprintf+0x2dc>
 832:	82 2f       	mov	r24, r18
 834:	86 78       	andi	r24, 0x86	; 134
 836:	09 f0       	breq	.+2      	; 0x83a <vfprintf+0x2dc>
 838:	73 94       	inc	r7
 83a:	23 fd       	sbrc	r18, 3
 83c:	13 c0       	rjmp	.+38     	; 0x864 <vfprintf+0x306>
 83e:	20 ff       	sbrs	r18, 0
 840:	06 c0       	rjmp	.+12     	; 0x84e <vfprintf+0x2f0>
 842:	5a 2c       	mov	r5, r10
 844:	73 14       	cp	r7, r3
 846:	18 f4       	brcc	.+6      	; 0x84e <vfprintf+0x2f0>
 848:	53 0c       	add	r5, r3
 84a:	57 18       	sub	r5, r7
 84c:	73 2c       	mov	r7, r3
 84e:	73 14       	cp	r7, r3
 850:	68 f4       	brcc	.+26     	; 0x86c <vfprintf+0x30e>
 852:	b7 01       	movw	r22, r14
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	2c 87       	std	Y+12, r18	; 0x0c
 85a:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 85e:	73 94       	inc	r7
 860:	2c 85       	ldd	r18, Y+12	; 0x0c
 862:	f5 cf       	rjmp	.-22     	; 0x84e <vfprintf+0x2f0>
 864:	73 14       	cp	r7, r3
 866:	10 f4       	brcc	.+4      	; 0x86c <vfprintf+0x30e>
 868:	37 18       	sub	r3, r7
 86a:	01 c0       	rjmp	.+2      	; 0x86e <vfprintf+0x310>
 86c:	31 2c       	mov	r3, r1
 86e:	24 ff       	sbrs	r18, 4
 870:	12 c0       	rjmp	.+36     	; 0x896 <vfprintf+0x338>
 872:	b7 01       	movw	r22, r14
 874:	80 e3       	ldi	r24, 0x30	; 48
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	2c 87       	std	Y+12, r18	; 0x0c
 87a:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 87e:	2c 85       	ldd	r18, Y+12	; 0x0c
 880:	22 ff       	sbrs	r18, 2
 882:	17 c0       	rjmp	.+46     	; 0x8b2 <vfprintf+0x354>
 884:	21 ff       	sbrs	r18, 1
 886:	03 c0       	rjmp	.+6      	; 0x88e <vfprintf+0x330>
 888:	88 e5       	ldi	r24, 0x58	; 88
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	02 c0       	rjmp	.+4      	; 0x892 <vfprintf+0x334>
 88e:	88 e7       	ldi	r24, 0x78	; 120
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	b7 01       	movw	r22, r14
 894:	0c c0       	rjmp	.+24     	; 0x8ae <vfprintf+0x350>
 896:	82 2f       	mov	r24, r18
 898:	86 78       	andi	r24, 0x86	; 134
 89a:	59 f0       	breq	.+22     	; 0x8b2 <vfprintf+0x354>
 89c:	21 fd       	sbrc	r18, 1
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <vfprintf+0x346>
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	01 c0       	rjmp	.+2      	; 0x8a6 <vfprintf+0x348>
 8a4:	8b e2       	ldi	r24, 0x2B	; 43
 8a6:	27 fd       	sbrc	r18, 7
 8a8:	8d e2       	ldi	r24, 0x2D	; 45
 8aa:	b7 01       	movw	r22, r14
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 8b2:	a5 14       	cp	r10, r5
 8b4:	38 f4       	brcc	.+14     	; 0x8c4 <vfprintf+0x366>
 8b6:	b7 01       	movw	r22, r14
 8b8:	80 e3       	ldi	r24, 0x30	; 48
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 8c0:	5a 94       	dec	r5
 8c2:	f7 cf       	rjmp	.-18     	; 0x8b2 <vfprintf+0x354>
 8c4:	aa 94       	dec	r10
 8c6:	f4 01       	movw	r30, r8
 8c8:	ea 0d       	add	r30, r10
 8ca:	f1 1d       	adc	r31, r1
 8cc:	80 81       	ld	r24, Z
 8ce:	b7 01       	movw	r22, r14
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 8d6:	a1 10       	cpse	r10, r1
 8d8:	f5 cf       	rjmp	.-22     	; 0x8c4 <vfprintf+0x366>
 8da:	33 20       	and	r3, r3
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <vfprintf+0x382>
 8de:	51 ce       	rjmp	.-862    	; 0x582 <vfprintf+0x24>
 8e0:	b7 01       	movw	r22, r14
 8e2:	80 e2       	ldi	r24, 0x20	; 32
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	0e 94 97 04 	call	0x92e	; 0x92e <fputc>
 8ea:	3a 94       	dec	r3
 8ec:	f6 cf       	rjmp	.-20     	; 0x8da <vfprintf+0x37c>
 8ee:	f7 01       	movw	r30, r14
 8f0:	86 81       	ldd	r24, Z+6	; 0x06
 8f2:	97 81       	ldd	r25, Z+7	; 0x07
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0x39c>
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	9f ef       	ldi	r25, 0xFF	; 255
 8fa:	2c 96       	adiw	r28, 0x0c	; 12
 8fc:	e2 e1       	ldi	r30, 0x12	; 18
 8fe:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__epilogue_restores__>

00000902 <strnlen_P>:
 902:	fc 01       	movw	r30, r24
 904:	05 90       	lpm	r0, Z+
 906:	61 50       	subi	r22, 0x01	; 1
 908:	70 40       	sbci	r23, 0x00	; 0
 90a:	01 10       	cpse	r0, r1
 90c:	d8 f7       	brcc	.-10     	; 0x904 <strnlen_P+0x2>
 90e:	80 95       	com	r24
 910:	90 95       	com	r25
 912:	8e 0f       	add	r24, r30
 914:	9f 1f       	adc	r25, r31
 916:	08 95       	ret

00000918 <strnlen>:
 918:	fc 01       	movw	r30, r24
 91a:	61 50       	subi	r22, 0x01	; 1
 91c:	70 40       	sbci	r23, 0x00	; 0
 91e:	01 90       	ld	r0, Z+
 920:	01 10       	cpse	r0, r1
 922:	d8 f7       	brcc	.-10     	; 0x91a <strnlen+0x2>
 924:	80 95       	com	r24
 926:	90 95       	com	r25
 928:	8e 0f       	add	r24, r30
 92a:	9f 1f       	adc	r25, r31
 92c:	08 95       	ret

0000092e <fputc>:
 92e:	0f 93       	push	r16
 930:	1f 93       	push	r17
 932:	cf 93       	push	r28
 934:	df 93       	push	r29
 936:	18 2f       	mov	r17, r24
 938:	09 2f       	mov	r16, r25
 93a:	eb 01       	movw	r28, r22
 93c:	8b 81       	ldd	r24, Y+3	; 0x03
 93e:	81 fd       	sbrc	r24, 1
 940:	03 c0       	rjmp	.+6      	; 0x948 <fputc+0x1a>
 942:	8f ef       	ldi	r24, 0xFF	; 255
 944:	9f ef       	ldi	r25, 0xFF	; 255
 946:	20 c0       	rjmp	.+64     	; 0x988 <fputc+0x5a>
 948:	82 ff       	sbrs	r24, 2
 94a:	10 c0       	rjmp	.+32     	; 0x96c <fputc+0x3e>
 94c:	4e 81       	ldd	r20, Y+6	; 0x06
 94e:	5f 81       	ldd	r21, Y+7	; 0x07
 950:	2c 81       	ldd	r18, Y+4	; 0x04
 952:	3d 81       	ldd	r19, Y+5	; 0x05
 954:	42 17       	cp	r20, r18
 956:	53 07       	cpc	r21, r19
 958:	7c f4       	brge	.+30     	; 0x978 <fputc+0x4a>
 95a:	e8 81       	ld	r30, Y
 95c:	f9 81       	ldd	r31, Y+1	; 0x01
 95e:	9f 01       	movw	r18, r30
 960:	2f 5f       	subi	r18, 0xFF	; 255
 962:	3f 4f       	sbci	r19, 0xFF	; 255
 964:	39 83       	std	Y+1, r19	; 0x01
 966:	28 83       	st	Y, r18
 968:	10 83       	st	Z, r17
 96a:	06 c0       	rjmp	.+12     	; 0x978 <fputc+0x4a>
 96c:	e8 85       	ldd	r30, Y+8	; 0x08
 96e:	f9 85       	ldd	r31, Y+9	; 0x09
 970:	81 2f       	mov	r24, r17
 972:	09 95       	icall
 974:	89 2b       	or	r24, r25
 976:	29 f7       	brne	.-54     	; 0x942 <fputc+0x14>
 978:	2e 81       	ldd	r18, Y+6	; 0x06
 97a:	3f 81       	ldd	r19, Y+7	; 0x07
 97c:	2f 5f       	subi	r18, 0xFF	; 255
 97e:	3f 4f       	sbci	r19, 0xFF	; 255
 980:	3f 83       	std	Y+7, r19	; 0x07
 982:	2e 83       	std	Y+6, r18	; 0x06
 984:	81 2f       	mov	r24, r17
 986:	90 2f       	mov	r25, r16
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	0f 91       	pop	r16
 990:	08 95       	ret

00000992 <__ultoa_invert>:
 992:	fa 01       	movw	r30, r20
 994:	aa 27       	eor	r26, r26
 996:	28 30       	cpi	r18, 0x08	; 8
 998:	51 f1       	breq	.+84     	; 0x9ee <__ultoa_invert+0x5c>
 99a:	20 31       	cpi	r18, 0x10	; 16
 99c:	81 f1       	breq	.+96     	; 0x9fe <__ultoa_invert+0x6c>
 99e:	e8 94       	clt
 9a0:	6f 93       	push	r22
 9a2:	6e 7f       	andi	r22, 0xFE	; 254
 9a4:	6e 5f       	subi	r22, 0xFE	; 254
 9a6:	7f 4f       	sbci	r23, 0xFF	; 255
 9a8:	8f 4f       	sbci	r24, 0xFF	; 255
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	af 4f       	sbci	r26, 0xFF	; 255
 9ae:	b1 e0       	ldi	r27, 0x01	; 1
 9b0:	3e d0       	rcall	.+124    	; 0xa2e <__ultoa_invert+0x9c>
 9b2:	b4 e0       	ldi	r27, 0x04	; 4
 9b4:	3c d0       	rcall	.+120    	; 0xa2e <__ultoa_invert+0x9c>
 9b6:	67 0f       	add	r22, r23
 9b8:	78 1f       	adc	r23, r24
 9ba:	89 1f       	adc	r24, r25
 9bc:	9a 1f       	adc	r25, r26
 9be:	a1 1d       	adc	r26, r1
 9c0:	68 0f       	add	r22, r24
 9c2:	79 1f       	adc	r23, r25
 9c4:	8a 1f       	adc	r24, r26
 9c6:	91 1d       	adc	r25, r1
 9c8:	a1 1d       	adc	r26, r1
 9ca:	6a 0f       	add	r22, r26
 9cc:	71 1d       	adc	r23, r1
 9ce:	81 1d       	adc	r24, r1
 9d0:	91 1d       	adc	r25, r1
 9d2:	a1 1d       	adc	r26, r1
 9d4:	20 d0       	rcall	.+64     	; 0xa16 <__ultoa_invert+0x84>
 9d6:	09 f4       	brne	.+2      	; 0x9da <__ultoa_invert+0x48>
 9d8:	68 94       	set
 9da:	3f 91       	pop	r19
 9dc:	2a e0       	ldi	r18, 0x0A	; 10
 9de:	26 9f       	mul	r18, r22
 9e0:	11 24       	eor	r1, r1
 9e2:	30 19       	sub	r19, r0
 9e4:	30 5d       	subi	r19, 0xD0	; 208
 9e6:	31 93       	st	Z+, r19
 9e8:	de f6       	brtc	.-74     	; 0x9a0 <__ultoa_invert+0xe>
 9ea:	cf 01       	movw	r24, r30
 9ec:	08 95       	ret
 9ee:	46 2f       	mov	r20, r22
 9f0:	47 70       	andi	r20, 0x07	; 7
 9f2:	40 5d       	subi	r20, 0xD0	; 208
 9f4:	41 93       	st	Z+, r20
 9f6:	b3 e0       	ldi	r27, 0x03	; 3
 9f8:	0f d0       	rcall	.+30     	; 0xa18 <__ultoa_invert+0x86>
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__ultoa_invert+0x5c>
 9fc:	f6 cf       	rjmp	.-20     	; 0x9ea <__ultoa_invert+0x58>
 9fe:	46 2f       	mov	r20, r22
 a00:	4f 70       	andi	r20, 0x0F	; 15
 a02:	40 5d       	subi	r20, 0xD0	; 208
 a04:	4a 33       	cpi	r20, 0x3A	; 58
 a06:	18 f0       	brcs	.+6      	; 0xa0e <__ultoa_invert+0x7c>
 a08:	49 5d       	subi	r20, 0xD9	; 217
 a0a:	31 fd       	sbrc	r19, 1
 a0c:	40 52       	subi	r20, 0x20	; 32
 a0e:	41 93       	st	Z+, r20
 a10:	02 d0       	rcall	.+4      	; 0xa16 <__ultoa_invert+0x84>
 a12:	a9 f7       	brne	.-22     	; 0x9fe <__ultoa_invert+0x6c>
 a14:	ea cf       	rjmp	.-44     	; 0x9ea <__ultoa_invert+0x58>
 a16:	b4 e0       	ldi	r27, 0x04	; 4
 a18:	a6 95       	lsr	r26
 a1a:	97 95       	ror	r25
 a1c:	87 95       	ror	r24
 a1e:	77 95       	ror	r23
 a20:	67 95       	ror	r22
 a22:	ba 95       	dec	r27
 a24:	c9 f7       	brne	.-14     	; 0xa18 <__ultoa_invert+0x86>
 a26:	00 97       	sbiw	r24, 0x00	; 0
 a28:	61 05       	cpc	r22, r1
 a2a:	71 05       	cpc	r23, r1
 a2c:	08 95       	ret
 a2e:	9b 01       	movw	r18, r22
 a30:	ac 01       	movw	r20, r24
 a32:	0a 2e       	mov	r0, r26
 a34:	06 94       	lsr	r0
 a36:	57 95       	ror	r21
 a38:	47 95       	ror	r20
 a3a:	37 95       	ror	r19
 a3c:	27 95       	ror	r18
 a3e:	ba 95       	dec	r27
 a40:	c9 f7       	brne	.-14     	; 0xa34 <__ultoa_invert+0xa2>
 a42:	62 0f       	add	r22, r18
 a44:	73 1f       	adc	r23, r19
 a46:	84 1f       	adc	r24, r20
 a48:	95 1f       	adc	r25, r21
 a4a:	a0 1d       	adc	r26, r0
 a4c:	08 95       	ret

00000a4e <__prologue_saves__>:
 a4e:	2f 92       	push	r2
 a50:	3f 92       	push	r3
 a52:	4f 92       	push	r4
 a54:	5f 92       	push	r5
 a56:	6f 92       	push	r6
 a58:	7f 92       	push	r7
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
 a72:	cd b7       	in	r28, 0x3d	; 61
 a74:	de b7       	in	r29, 0x3e	; 62
 a76:	ca 1b       	sub	r28, r26
 a78:	db 0b       	sbc	r29, r27
 a7a:	0f b6       	in	r0, 0x3f	; 63
 a7c:	f8 94       	cli
 a7e:	de bf       	out	0x3e, r29	; 62
 a80:	0f be       	out	0x3f, r0	; 63
 a82:	cd bf       	out	0x3d, r28	; 61
 a84:	09 94       	ijmp

00000a86 <__epilogue_restores__>:
 a86:	2a 88       	ldd	r2, Y+18	; 0x12
 a88:	39 88       	ldd	r3, Y+17	; 0x11
 a8a:	48 88       	ldd	r4, Y+16	; 0x10
 a8c:	5f 84       	ldd	r5, Y+15	; 0x0f
 a8e:	6e 84       	ldd	r6, Y+14	; 0x0e
 a90:	7d 84       	ldd	r7, Y+13	; 0x0d
 a92:	8c 84       	ldd	r8, Y+12	; 0x0c
 a94:	9b 84       	ldd	r9, Y+11	; 0x0b
 a96:	aa 84       	ldd	r10, Y+10	; 0x0a
 a98:	b9 84       	ldd	r11, Y+9	; 0x09
 a9a:	c8 84       	ldd	r12, Y+8	; 0x08
 a9c:	df 80       	ldd	r13, Y+7	; 0x07
 a9e:	ee 80       	ldd	r14, Y+6	; 0x06
 aa0:	fd 80       	ldd	r15, Y+5	; 0x05
 aa2:	0c 81       	ldd	r16, Y+4	; 0x04
 aa4:	1b 81       	ldd	r17, Y+3	; 0x03
 aa6:	aa 81       	ldd	r26, Y+2	; 0x02
 aa8:	b9 81       	ldd	r27, Y+1	; 0x01
 aaa:	ce 0f       	add	r28, r30
 aac:	d1 1d       	adc	r29, r1
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	f8 94       	cli
 ab2:	de bf       	out	0x3e, r29	; 62
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	cd bf       	out	0x3d, r28	; 61
 ab8:	ed 01       	movw	r28, r26
 aba:	08 95       	ret

00000abc <_exit>:
 abc:	f8 94       	cli

00000abe <__stop_program>:
 abe:	ff cf       	rjmp	.-2      	; 0xabe <__stop_program>

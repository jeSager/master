   1               		.file	"proj2-1.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	printBuffer
  12               	printBuffer:
  13               	.LFB2:
  14               		.file 1 "proj2-1.c"
   1:proj2-1.c     **** #include "timer.h"
   2:proj2-1.c     **** #include "cmod.h"
   3:proj2-1.c     **** #include "iroblib.h"
   4:proj2-1.c     **** #include "oi.h"
   5:proj2-1.c     **** #include <stdlib.h>
   6:proj2-1.c     **** #include <stdio.h>
   7:proj2-1.c     **** #include <string.h>
   8:proj2-1.c     **** 
   9:proj2-1.c     **** // Declare Global variables 
  10:proj2-1.c     **** uint8_t sensors[Sen6Size]; // Array for all sensor data the robot can send
  11:proj2-1.c     **** 
  12:proj2-1.c     **** // functions
  13:proj2-1.c     **** int main(void);
  14:proj2-1.c     **** void printBuffer(char buf[]); // Method to pass each char into the string
  15:proj2-1.c     **** 
  16:proj2-1.c     **** int main(void) {
  17:proj2-1.c     **** // Set up Create and module
  18:proj2-1.c     ****    initializeCommandModule();
  19:proj2-1.c     **** 
  20:proj2-1.c     ****    powerOnRobot();
  21:proj2-1.c     **** // Is the Robot on
  22:proj2-1.c     ****    byteTx(CmdStart);
  23:proj2-1.c     **** // Start the create
  24:proj2-1.c     ****    baud(Baud57600);
  25:proj2-1.c     **** // Set the baud rate for the Create and Command Module
  26:proj2-1.c     ****    defineSongs();
  27:proj2-1.c     **** // Define some songs so that we know the robot is on.
  28:proj2-1.c     ****    byteTx(CmdControl);
  29:proj2-1.c     **** // Deprecated form of safe mode. I use it because it will
  30:proj2-1.c     **** // turn of all LEDs, so it's essentially a reset.
  31:proj2-1.c     ****    byteTx(CmdFull);
  32:proj2-1.c     **** // We are operating in FULL mode.
  33:proj2-1.c     **** 
  34:proj2-1.c     **** // CSCE 274 students: I would make sure the robot stops. 
  35:proj2-1.c     **** //                    As a precaution for the robot and your grade.
  36:proj2-1.c     **** 
  37:proj2-1.c     **** // Play the reset song and wait while it plays.
  38:proj2-1.c     ****    byteTx(CmdPlay);
  39:proj2-1.c     ****    byteTx(RESET_SONG);
  40:proj2-1.c     ****    delayMs(750);
  41:proj2-1.c     **** 
  42:proj2-1.c     **** // Turn the power button on to something. I like red, but here is green.
  43:proj2-1.c     **** // CSCE 274 students: The following should (will) be a function that you write.
  44:proj2-1.c     ****    byteTx(CmdLeds);
  45:proj2-1.c     ****    byteTx(0x00);
  46:proj2-1.c     ****    byteTx(0);
  47:proj2-1.c     ****    byteTx(255);
  48:proj2-1.c     **** 
  49:proj2-1.c     **** // Infinite operation loop
  50:proj2-1.c     ****    for(;;) {
  51:proj2-1.c     ****       if(canSense==1){ // Using timer 0 to continuously update the sensor array
  52:proj2-1.c     ****          uint8_t i;
  53:proj2-1.c     ****          while(UCSR0A & 0x80)
  54:proj2-1.c     ****             i = UDR0;
  55:proj2-1.c     ****          byteTx(CmdSensors);  // Sensor opcode 
  56:proj2-1.c     ****          byteTx(6);   // Send request for packet 6
  57:proj2-1.c     ****          for(uint8_t i = 0; i < Sen6Size; i++) { // Read each sensor byte
  58:proj2-1.c     ****             sensors[i] = byteRx();
  59:proj2-1.c     ****          }	
  60:proj2-1.c     ****          senseTimerCount=100; // Reset for Timer 0 sensor reading
  61:proj2-1.c     ****          canSense=0;
  62:proj2-1.c     ****       }
  63:proj2-1.c     ****    // Print out sensor data, typecast for 2 byte values and specify for 
  64:proj2-1.c     ****    // unsigned when necessary
  65:proj2-1.c     ****       if(canPrint == 1) { // Using timer 1 to print every second
  66:proj2-1.c     ****          setSerialDestination(SERIAL_USB);
  67:proj2-1.c     ****          cli();
  68:proj2-1.c     ****          char buffer[50]; // 50 is a safe value since the string will not exceed that
  69:proj2-1.c     ****          sprintf(buffer,"Battery Charge: %i\n", 
  70:proj2-1.c     ****             (uint16_t)((sensors[SenCharge1] << 8)| sensors[SenCharge0]));
  71:proj2-1.c     ****          printBuffer(buffer);
  72:proj2-1.c     ****          sprintf(buffer,"Wall Signal: %i\n", 
  73:proj2-1.c     ****             (uint16_t)((sensors[SenWallSig1] << 8)| sensors[SenWallSig0]));
  74:proj2-1.c     ****          printBuffer(buffer);
  75:proj2-1.c     ****          sprintf(buffer,"Cliff Left: %u\n", 
  76:proj2-1.c     ****             (uint16_t)((sensors[SenCliffLSig1] << 8)| sensors[SenCliffLSig0]));
  77:proj2-1.c     ****          printBuffer(buffer);
  78:proj2-1.c     ****          sprintf(buffer,"Cliff Front Left: %i\n", 
  79:proj2-1.c     ****             (uint16_t)((sensors[SenCliffFLSig1] << 8)| sensors[SenCliffFLSig0]));
  80:proj2-1.c     ****          printBuffer(buffer);
  81:proj2-1.c     ****          sprintf(buffer,"Cliff Front Right: %i\n", 
  82:proj2-1.c     ****             (uint16_t)((sensors[SenCliffFRSig1] << 8)| sensors[SenCliffFRSig0]));
  83:proj2-1.c     ****          printBuffer(buffer);
  84:proj2-1.c     ****          sprintf(buffer,"Cliff Right: %i\n", 
  85:proj2-1.c     ****             (uint16_t)((sensors[SenCliffRSig1] << 8)| sensors[SenCliffRSig0]));
  86:proj2-1.c     ****          printBuffer(buffer);
  87:proj2-1.c     ****          sprintf(buffer,"Charging State: %i\n", sensors[SenChargeState]);
  88:proj2-1.c     ****          printBuffer(buffer);
  89:proj2-1.c     ****          sprintf(buffer,"Voltage: %i\n", 
  90:proj2-1.c     ****             (uint16_t)((sensors[SenVolt1] << 8)| sensors[SenVolt0]));
  91:proj2-1.c     ****          printBuffer(buffer);
  92:proj2-1.c     ****          sprintf(buffer,"Current: %i\n", 
  93:proj2-1.c     ****             (uint16_t)((sensors[SenCurr1] << 8)| sensors[SenCurr0]));
  94:proj2-1.c     ****          printBuffer(buffer);
  95:proj2-1.c     ****          sprintf(buffer,"Battery Temperature: %u\n", sensors[SenTemp]);
  96:proj2-1.c     ****          printBuffer(buffer);
  97:proj2-1.c     ****          sprintf(buffer,"Battery Charge: %i\n", 
  98:proj2-1.c     ****             (uint16_t)((sensors[SenCharge1] << 8)| sensors[SenCharge0]));
  99:proj2-1.c     ****          printBuffer(buffer);
 100:proj2-1.c     ****          sprintf(buffer,"Battery Capacity: %i\n", 
 101:proj2-1.c     ****             (uint16_t)((sensors[SenCap1] << 8)| sensors[SenCap0]));
 102:proj2-1.c     ****          printBuffer(buffer);
 103:proj2-1.c     ****          sei();			
 104:proj2-1.c     ****          setSerialDestination(SERIAL_CREATE);
 105:proj2-1.c     ****          canPrint=0;
 106:proj2-1.c     ****       }
 107:proj2-1.c     ****       delayMs(15);
 108:proj2-1.c     ****       if(UserButtonPressed) {
 109:proj2-1.c     ****          powerOffRobot();
 110:proj2-1.c     ****          exit(1);
 111:proj2-1.c     ****       }
 112:proj2-1.c     ****    }
 113:proj2-1.c     **** }
 114:proj2-1.c     **** // Print buffer needed because only one character can be sent at a type to construct the string
 115:proj2-1.c     **** void printBuffer(char buf[]) {
  15               		.loc 1 115 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  38 0008 EC01      		movw r28,r24
  39               	.LVL1:
 116:proj2-1.c     ****    int i;
 117:proj2-1.c     ****    for(i = 0; i < strlen(buf); i++) {
  40               		.loc 1 117 0
  41 000a 8C01      		movw r16,r24
  42               	.LVL2:
  43               	.L2:
  44               		.loc 1 117 0 is_stmt 0 discriminator 1
  45 000c FE01      		movw r30,r28
  46               		0:
  47 000e 0190      		ld __tmp_reg__,Z+
  48 0010 0020      		tst __tmp_reg__
  49 0012 01F4      		brne 0b
  50 0014 3197      		sbiw r30,1
  51 0016 EC1B      		sub r30,r28
  52 0018 FD0B      		sbc r31,r29
  53 001a C801      		movw r24,r16
  54 001c 8C1B      		sub r24,r28
  55 001e 9D0B      		sbc r25,r29
  56               	.LVL3:
  57 0020 8E17      		cp r24,r30
  58 0022 9F07      		cpc r25,r31
  59 0024 00F4      		brsh .L5
 118:proj2-1.c     ****       byteTx(buf[i]);
  60               		.loc 1 118 0 is_stmt 1 discriminator 2
  61 0026 F801      		movw r30,r16
  62 0028 8191      		ld r24,Z+
  63               	.LVL4:
  64 002a 8F01      		movw r16,r30
  65               	.LVL5:
  66 002c 0E94 0000 		call byteTx
  67               	.LVL6:
  68 0030 00C0      		rjmp .L2
  69               	.LVL7:
  70               	.L5:
  71               	/* epilogue start */
 119:proj2-1.c     ****    }
 120:proj2-1.c     **** }
  72               		.loc 1 120 0
  73 0032 DF91      		pop r29
  74 0034 CF91      		pop r28
  75               	.LVL8:
  76 0036 1F91      		pop r17
  77 0038 0F91      		pop r16
  78 003a 0895      		ret
  79               		.cfi_endproc
  80               	.LFE2:
  82               		.section	.rodata.str1.1,"aMS",@progbits,1
  83               	.LC0:
  84 0000 4261 7474 		.string	"Battery Charge: %i\n"
  84      6572 7920 
  84      4368 6172 
  84      6765 3A20 
  84      2569 0A00 
  85               	.LC1:
  86 0014 5761 6C6C 		.string	"Wall Signal: %i\n"
  86      2053 6967 
  86      6E61 6C3A 
  86      2025 690A 
  86      00
  87               	.LC2:
  88 0025 436C 6966 		.string	"Cliff Left: %u\n"
  88      6620 4C65 
  88      6674 3A20 
  88      2575 0A00 
  89               	.LC3:
  90 0035 436C 6966 		.string	"Cliff Front Left: %i\n"
  90      6620 4672 
  90      6F6E 7420 
  90      4C65 6674 
  90      3A20 2569 
  91               	.LC4:
  92 004b 436C 6966 		.string	"Cliff Front Right: %i\n"
  92      6620 4672 
  92      6F6E 7420 
  92      5269 6768 
  92      743A 2025 
  93               	.LC5:
  94 0062 436C 6966 		.string	"Cliff Right: %i\n"
  94      6620 5269 
  94      6768 743A 
  94      2025 690A 
  94      00
  95               	.LC6:
  96 0073 4368 6172 		.string	"Charging State: %i\n"
  96      6769 6E67 
  96      2053 7461 
  96      7465 3A20 
  96      2569 0A00 
  97               	.LC7:
  98 0087 566F 6C74 		.string	"Voltage: %i\n"
  98      6167 653A 
  98      2025 690A 
  98      00
  99               	.LC8:
 100 0094 4375 7272 		.string	"Current: %i\n"
 100      656E 743A 
 100      2025 690A 
 100      00
 101               	.LC9:
 102 00a1 4261 7474 		.string	"Battery Temperature: %u\n"
 102      6572 7920 
 102      5465 6D70 
 102      6572 6174 
 102      7572 653A 
 103               	.LC10:
 104 00ba 4261 7474 		.string	"Battery Capacity: %i\n"
 104      6572 7920 
 104      4361 7061 
 104      6369 7479 
 104      3A20 2569 
 105               		.section	.text.startup,"ax",@progbits
 106               	.global	main
 108               	main:
 109               	.LFB1:
  16:proj2-1.c     **** int main(void) {
 110               		.loc 1 16 0
 111               		.cfi_startproc
 112 0000 CF93      		push r28
 113               	.LCFI4:
 114               		.cfi_def_cfa_offset 3
 115               		.cfi_offset 28, -2
 116 0002 DF93      		push r29
 117               	.LCFI5:
 118               		.cfi_def_cfa_offset 4
 119               		.cfi_offset 29, -3
 120 0004 CDB7      		in r28,__SP_L__
 121 0006 DEB7      		in r29,__SP_H__
 122               	.LCFI6:
 123               		.cfi_def_cfa_register 28
 124 0008 E497      		sbiw r28,52
 125               	.LCFI7:
 126               		.cfi_def_cfa_offset 56
 127 000a 0FB6      		in __tmp_reg__,__SREG__
 128 000c F894      		cli
 129 000e DEBF      		out __SP_H__,r29
 130 0010 0FBE      		out __SREG__,__tmp_reg__
 131 0012 CDBF      		out __SP_L__,r28
 132               	/* prologue: function */
 133               	/* frame size = 52 */
 134               	/* stack size = 54 */
 135               	.L__stack_usage = 54
  18:proj2-1.c     ****    initializeCommandModule();
 136               		.loc 1 18 0
 137 0014 0E94 0000 		call initializeCommandModule
 138               	.LVL9:
  20:proj2-1.c     ****    powerOnRobot();
 139               		.loc 1 20 0
 140 0018 0E94 0000 		call powerOnRobot
 141               	.LVL10:
  22:proj2-1.c     ****    byteTx(CmdStart);
 142               		.loc 1 22 0
 143 001c 80E8      		ldi r24,lo8(-128)
 144 001e 0E94 0000 		call byteTx
 145               	.LVL11:
  24:proj2-1.c     ****    baud(Baud57600);
 146               		.loc 1 24 0
 147 0022 8AE0      		ldi r24,lo8(10)
 148 0024 0E94 0000 		call baud
 149               	.LVL12:
  26:proj2-1.c     ****    defineSongs();
 150               		.loc 1 26 0
 151 0028 0E94 0000 		call defineSongs
 152               	.LVL13:
  28:proj2-1.c     ****    byteTx(CmdControl);
 153               		.loc 1 28 0
 154 002c 82E8      		ldi r24,lo8(-126)
 155 002e 0E94 0000 		call byteTx
 156               	.LVL14:
  31:proj2-1.c     ****    byteTx(CmdFull);
 157               		.loc 1 31 0
 158 0032 84E8      		ldi r24,lo8(-124)
 159 0034 0E94 0000 		call byteTx
 160               	.LVL15:
  38:proj2-1.c     ****    byteTx(CmdPlay);
 161               		.loc 1 38 0
 162 0038 8DE8      		ldi r24,lo8(-115)
 163 003a 0E94 0000 		call byteTx
 164               	.LVL16:
  39:proj2-1.c     ****    byteTx(RESET_SONG);
 165               		.loc 1 39 0
 166 003e 80E0      		ldi r24,0
 167 0040 0E94 0000 		call byteTx
 168               	.LVL17:
  40:proj2-1.c     ****    delayMs(750);
 169               		.loc 1 40 0
 170 0044 8EEE      		ldi r24,lo8(-18)
 171 0046 92E0      		ldi r25,lo8(2)
 172 0048 0E94 0000 		call delayMs
 173               	.LVL18:
  44:proj2-1.c     ****    byteTx(CmdLeds);
 174               		.loc 1 44 0
 175 004c 8BE8      		ldi r24,lo8(-117)
 176 004e 0E94 0000 		call byteTx
 177               	.LVL19:
  45:proj2-1.c     ****    byteTx(0x00);
 178               		.loc 1 45 0
 179 0052 80E0      		ldi r24,0
 180 0054 0E94 0000 		call byteTx
 181               	.LVL20:
  46:proj2-1.c     ****    byteTx(0);
 182               		.loc 1 46 0
 183 0058 80E0      		ldi r24,0
 184 005a 0E94 0000 		call byteTx
 185               	.LVL21:
  47:proj2-1.c     ****    byteTx(255);
 186               		.loc 1 47 0
 187 005e 8FEF      		ldi r24,lo8(-1)
 188 0060 0E94 0000 		call byteTx
 189               	.LVL22:
 190               	.LBB2:
  69:proj2-1.c     ****          sprintf(buffer,"Battery Charge: %i\n", 
 191               		.loc 1 69 0
 192 0064 10E0      		ldi r17,lo8(.LC0)
 193 0066 E12E      		mov r14,r17
 194 0068 10E0      		ldi r17,hi8(.LC0)
 195 006a F12E      		mov r15,r17
 196 006c 8E01      		movw r16,r28
 197 006e 0F5F      		subi r16,-1
 198 0070 1F4F      		sbci r17,-1
  81:proj2-1.c     ****          sprintf(buffer,"Cliff Front Right: %i\n", 
 199               		.loc 1 81 0
 200 0072 80E0      		ldi r24,lo8(.LC4)
 201 0074 282E      		mov r2,r24
 202 0076 80E0      		ldi r24,hi8(.LC4)
 203 0078 382E      		mov r3,r24
  84:proj2-1.c     ****          sprintf(buffer,"Cliff Right: %i\n", 
 204               		.loc 1 84 0
 205 007a 90E0      		ldi r25,lo8(.LC5)
 206 007c 492E      		mov r4,r25
 207 007e 90E0      		ldi r25,hi8(.LC5)
 208 0080 592E      		mov r5,r25
  87:proj2-1.c     ****          sprintf(buffer,"Charging State: %i\n", sensors[SenChargeState]);
 209               		.loc 1 87 0
 210 0082 20E0      		ldi r18,lo8(.LC6)
 211 0084 622E      		mov r6,r18
 212 0086 20E0      		ldi r18,hi8(.LC6)
 213 0088 722E      		mov r7,r18
  89:proj2-1.c     ****          sprintf(buffer,"Voltage: %i\n", 
 214               		.loc 1 89 0
 215 008a 30E0      		ldi r19,lo8(.LC7)
 216 008c C32E      		mov r12,r19
 217 008e 30E0      		ldi r19,hi8(.LC7)
 218 0090 D32E      		mov r13,r19
  92:proj2-1.c     ****          sprintf(buffer,"Current: %i\n", 
 219               		.loc 1 92 0
 220 0092 40E0      		ldi r20,lo8(.LC8)
 221 0094 A42E      		mov r10,r20
 222 0096 40E0      		ldi r20,hi8(.LC8)
 223 0098 B42E      		mov r11,r20
  95:proj2-1.c     ****          sprintf(buffer,"Battery Temperature: %u\n", sensors[SenTemp]);
 224               		.loc 1 95 0
 225 009a 50E0      		ldi r21,lo8(.LC9)
 226 009c 852E      		mov r8,r21
 227 009e 50E0      		ldi r21,hi8(.LC9)
 228 00a0 952E      		mov r9,r21
 229               	.L14:
 230               	.LBE2:
  51:proj2-1.c     ****       if(canSense==1){ // Using timer 0 to continuously update the sensor array
 231               		.loc 1 51 0
 232 00a2 8091 0000 		lds r24,canSense
 233 00a6 8130      		cpi r24,lo8(1)
 234 00a8 01F4      		brne .L7
 235               	.L8:
 236               	.LBB3:
  53:proj2-1.c     ****          while(UCSR0A & 0x80)
 237               		.loc 1 53 0 discriminator 1
 238 00aa 8091 C000 		lds r24,192
 239 00ae 87FF      		sbrs r24,7
 240 00b0 00C0      		rjmp .L15
  54:proj2-1.c     ****             i = UDR0;
 241               		.loc 1 54 0
 242 00b2 8091 C600 		lds r24,198
 243 00b6 00C0      		rjmp .L8
 244               	.L15:
  55:proj2-1.c     ****          byteTx(CmdSensors);  // Sensor opcode 
 245               		.loc 1 55 0
 246 00b8 8EE8      		ldi r24,lo8(-114)
 247 00ba 0E94 0000 		call byteTx
 248               	.LVL23:
  56:proj2-1.c     ****          byteTx(6);   // Send request for packet 6
 249               		.loc 1 56 0
 250 00be 86E0      		ldi r24,lo8(6)
 251 00c0 0E94 0000 		call byteTx
 252               	.LVL24:
 253 00c4 20E0      		ldi r18,lo8(sensors)
 254 00c6 30E0      		ldi r19,hi8(sensors)
 255               	.LVL25:
 256               	.L11:
 257               	.LBB4:
  58:proj2-1.c     ****             sensors[i] = byteRx();
 258               		.loc 1 58 0 discriminator 2
 259 00c8 2BAB      		std Y+51,r18
 260 00ca 3CAB      		std Y+52,r19
 261 00cc 0E94 0000 		call byteRx
 262               	.LVL26:
 263 00d0 2BA9      		ldd r18,Y+51
 264 00d2 3CA9      		ldd r19,Y+52
 265 00d4 D901      		movw r26,r18
 266 00d6 8D93      		st X+,r24
 267 00d8 9D01      		movw r18,r26
 268               	.LVL27:
  57:proj2-1.c     ****          for(uint8_t i = 0; i < Sen6Size; i++) { // Read each sensor byte
 269               		.loc 1 57 0 discriminator 2
 270 00da B0E0      		ldi r27,hi8(sensors+52)
 271 00dc 2030      		cpi r18,lo8(sensors+52)
 272 00de 3B07      		cpc r19,r27
 273 00e0 01F4      		brne .L11
 274               	.LBE4:
  60:proj2-1.c     ****          senseTimerCount=100; // Reset for Timer 0 sensor reading
 275               		.loc 1 60 0
 276 00e2 E4E6      		ldi r30,lo8(100)
 277 00e4 F0E0      		ldi r31,0
 278 00e6 F093 0000 		sts senseTimerCount+1,r31
 279 00ea E093 0000 		sts senseTimerCount,r30
  61:proj2-1.c     ****          canSense=0;
 280               		.loc 1 61 0
 281 00ee 1092 0000 		sts canSense,__zero_reg__
 282               	.LVL28:
 283               	.L7:
 284               	.LBE3:
  65:proj2-1.c     ****       if(canPrint == 1) { // Using timer 1 to print every second
 285               		.loc 1 65 0
 286 00f2 8091 0000 		lds r24,canPrint
 287 00f6 8130      		cpi r24,lo8(1)
 288 00f8 01F0      		breq .+2
 289 00fa 00C0      		rjmp .L12
 290               	.LBB5:
  66:proj2-1.c     ****          setSerialDestination(SERIAL_USB);
 291               		.loc 1 66 0
 292 00fc 82E0      		ldi r24,lo8(2)
 293 00fe 0E94 0000 		call setSerialDestination
 294               	.LVL29:
  67:proj2-1.c     ****          cli();
 295               		.loc 1 67 0
 296               	/* #APP */
 297               	 ;  67 "proj2-1.c" 1
 298 0102 F894      		cli
 299               	 ;  0 "" 2
  70:proj2-1.c     ****             (uint16_t)((sensors[SenCharge1] << 8)| sensors[SenCharge0]));
 300               		.loc 1 70 0
 301               	/* #NOAPP */
 302 0104 8091 0000 		lds r24,sensors+22
 303 0108 90E0      		ldi r25,0
 304 010a 982F      		mov r25,r24
 305 010c 8827      		clr r24
 306 010e 2091 0000 		lds r18,sensors+23
 307 0112 822B      		or r24,r18
  69:proj2-1.c     ****          sprintf(buffer,"Battery Charge: %i\n", 
 308               		.loc 1 69 0
 309 0114 9F93      		push r25
 310 0116 8F93      		push r24
 311 0118 FF92      		push r15
 312 011a EF92      		push r14
 313 011c 1F93      		push r17
 314 011e 0F93      		push r16
 315 0120 0E94 0000 		call sprintf
 316               	.LVL30:
  71:proj2-1.c     ****          printBuffer(buffer);
 317               		.loc 1 71 0
 318 0124 C801      		movw r24,r16
 319 0126 0E94 0000 		call printBuffer
 320               	.LVL31:
  73:proj2-1.c     ****             (uint16_t)((sensors[SenWallSig1] << 8)| sensors[SenWallSig0]));
 321               		.loc 1 73 0
 322 012a 8091 0000 		lds r24,sensors+26
 323 012e 90E0      		ldi r25,0
 324 0130 982F      		mov r25,r24
 325 0132 8827      		clr r24
 326 0134 2091 0000 		lds r18,sensors+27
 327 0138 822B      		or r24,r18
  72:proj2-1.c     ****          sprintf(buffer,"Wall Signal: %i\n", 
 328               		.loc 1 72 0
 329 013a 9F93      		push r25
 330 013c 8F93      		push r24
 331 013e A0E0      		ldi r26,lo8(.LC1)
 332 0140 B0E0      		ldi r27,hi8(.LC1)
 333 0142 BF93      		push r27
 334 0144 AF93      		push r26
 335 0146 1F93      		push r17
 336 0148 0F93      		push r16
 337 014a 0E94 0000 		call sprintf
 338               	.LVL32:
  74:proj2-1.c     ****          printBuffer(buffer);
 339               		.loc 1 74 0
 340 014e C801      		movw r24,r16
 341 0150 0E94 0000 		call printBuffer
 342               	.LVL33:
  76:proj2-1.c     ****             (uint16_t)((sensors[SenCliffLSig1] << 8)| sensors[SenCliffLSig0]));
 343               		.loc 1 76 0
 344 0154 8091 0000 		lds r24,sensors+28
 345 0158 90E0      		ldi r25,0
 346 015a 982F      		mov r25,r24
 347 015c 8827      		clr r24
 348 015e 2091 0000 		lds r18,sensors+29
 349 0162 822B      		or r24,r18
  75:proj2-1.c     ****          sprintf(buffer,"Cliff Left: %u\n", 
 350               		.loc 1 75 0
 351 0164 9F93      		push r25
 352 0166 8F93      		push r24
 353 0168 A0E0      		ldi r26,lo8(.LC2)
 354 016a B0E0      		ldi r27,hi8(.LC2)
 355 016c BF93      		push r27
 356 016e AF93      		push r26
 357 0170 1F93      		push r17
 358 0172 0F93      		push r16
 359 0174 0E94 0000 		call sprintf
 360               	.LVL34:
  77:proj2-1.c     ****          printBuffer(buffer);
 361               		.loc 1 77 0
 362 0178 C801      		movw r24,r16
 363 017a 0E94 0000 		call printBuffer
 364               	.LVL35:
  79:proj2-1.c     ****             (uint16_t)((sensors[SenCliffFLSig1] << 8)| sensors[SenCliffFLSig0]));
 365               		.loc 1 79 0
 366 017e 8091 0000 		lds r24,sensors+30
 367 0182 90E0      		ldi r25,0
 368 0184 982F      		mov r25,r24
 369 0186 8827      		clr r24
 370 0188 2091 0000 		lds r18,sensors+31
 371 018c 822B      		or r24,r18
  78:proj2-1.c     ****          sprintf(buffer,"Cliff Front Left: %i\n", 
 372               		.loc 1 78 0
 373 018e 9F93      		push r25
 374 0190 8F93      		push r24
 375 0192 A0E0      		ldi r26,lo8(.LC3)
 376 0194 B0E0      		ldi r27,hi8(.LC3)
 377 0196 BF93      		push r27
 378 0198 AF93      		push r26
 379 019a 1F93      		push r17
 380 019c 0F93      		push r16
 381 019e 0E94 0000 		call sprintf
 382               	.LVL36:
  80:proj2-1.c     ****          printBuffer(buffer);
 383               		.loc 1 80 0
 384 01a2 C801      		movw r24,r16
 385 01a4 0E94 0000 		call printBuffer
 386               	.LVL37:
  82:proj2-1.c     ****             (uint16_t)((sensors[SenCliffFRSig1] << 8)| sensors[SenCliffFRSig0]));
 387               		.loc 1 82 0
 388 01a8 8091 0000 		lds r24,sensors+32
 389 01ac 90E0      		ldi r25,0
 390 01ae 982F      		mov r25,r24
 391 01b0 8827      		clr r24
 392 01b2 2091 0000 		lds r18,sensors+33
 393 01b6 822B      		or r24,r18
  81:proj2-1.c     ****          sprintf(buffer,"Cliff Front Right: %i\n", 
 394               		.loc 1 81 0
 395 01b8 9F93      		push r25
 396 01ba 8F93      		push r24
 397 01bc 3F92      		push r3
 398 01be 2F92      		push r2
 399 01c0 1F93      		push r17
 400 01c2 0F93      		push r16
 401 01c4 0E94 0000 		call sprintf
 402               	.LVL38:
  83:proj2-1.c     ****          printBuffer(buffer);
 403               		.loc 1 83 0
 404 01c8 C801      		movw r24,r16
 405 01ca 0E94 0000 		call printBuffer
 406               	.LVL39:
  85:proj2-1.c     ****             (uint16_t)((sensors[SenCliffRSig1] << 8)| sensors[SenCliffRSig0]));
 407               		.loc 1 85 0
 408 01ce 8091 0000 		lds r24,sensors+34
 409 01d2 90E0      		ldi r25,0
 410 01d4 982F      		mov r25,r24
 411 01d6 8827      		clr r24
 412 01d8 2091 0000 		lds r18,sensors+35
 413 01dc 822B      		or r24,r18
  84:proj2-1.c     ****          sprintf(buffer,"Cliff Right: %i\n", 
 414               		.loc 1 84 0
 415 01de 9F93      		push r25
 416 01e0 8F93      		push r24
 417 01e2 5F92      		push r5
 418 01e4 4F92      		push r4
 419 01e6 1F93      		push r17
 420 01e8 0F93      		push r16
 421 01ea 0E94 0000 		call sprintf
 422               	.LVL40:
  86:proj2-1.c     ****          printBuffer(buffer);
 423               		.loc 1 86 0
 424 01ee 0FB6      		in __tmp_reg__,__SREG__
 425 01f0 F894      		cli
 426 01f2 DEBF      		out __SP_H__,r29
 427 01f4 0FBE      		out __SREG__,__tmp_reg__
 428 01f6 CDBF      		out __SP_L__,r28
 429 01f8 C801      		movw r24,r16
 430 01fa 0E94 0000 		call printBuffer
 431               	.LVL41:
  87:proj2-1.c     ****          sprintf(buffer,"Charging State: %i\n", sensors[SenChargeState]);
 432               		.loc 1 87 0
 433 01fe 8091 0000 		lds r24,sensors+16
 434 0202 1F92      		push __zero_reg__
 435 0204 8F93      		push r24
 436 0206 7F92      		push r7
 437 0208 6F92      		push r6
 438 020a 1F93      		push r17
 439 020c 0F93      		push r16
 440 020e 0E94 0000 		call sprintf
 441               	.LVL42:
  88:proj2-1.c     ****          printBuffer(buffer);
 442               		.loc 1 88 0
 443 0212 C801      		movw r24,r16
 444 0214 0E94 0000 		call printBuffer
 445               	.LVL43:
  90:proj2-1.c     ****             (uint16_t)((sensors[SenVolt1] << 8)| sensors[SenVolt0]));
 446               		.loc 1 90 0
 447 0218 8091 0000 		lds r24,sensors+17
 448 021c 90E0      		ldi r25,0
 449 021e 982F      		mov r25,r24
 450 0220 8827      		clr r24
 451 0222 2091 0000 		lds r18,sensors+18
 452 0226 822B      		or r24,r18
  89:proj2-1.c     ****          sprintf(buffer,"Voltage: %i\n", 
 453               		.loc 1 89 0
 454 0228 9F93      		push r25
 455 022a 8F93      		push r24
 456 022c DF92      		push r13
 457 022e CF92      		push r12
 458 0230 1F93      		push r17
 459 0232 0F93      		push r16
 460 0234 0E94 0000 		call sprintf
 461               	.LVL44:
  91:proj2-1.c     ****          printBuffer(buffer);
 462               		.loc 1 91 0
 463 0238 C801      		movw r24,r16
 464 023a 0E94 0000 		call printBuffer
 465               	.LVL45:
  93:proj2-1.c     ****             (uint16_t)((sensors[SenCurr1] << 8)| sensors[SenCurr0]));
 466               		.loc 1 93 0
 467 023e 8091 0000 		lds r24,sensors+19
 468 0242 90E0      		ldi r25,0
 469 0244 982F      		mov r25,r24
 470 0246 8827      		clr r24
 471 0248 2091 0000 		lds r18,sensors+20
 472 024c 822B      		or r24,r18
  92:proj2-1.c     ****          sprintf(buffer,"Current: %i\n", 
 473               		.loc 1 92 0
 474 024e 9F93      		push r25
 475 0250 8F93      		push r24
 476 0252 BF92      		push r11
 477 0254 AF92      		push r10
 478 0256 1F93      		push r17
 479 0258 0F93      		push r16
 480 025a 0E94 0000 		call sprintf
 481               	.LVL46:
  94:proj2-1.c     ****          printBuffer(buffer);
 482               		.loc 1 94 0
 483 025e C801      		movw r24,r16
 484 0260 0E94 0000 		call printBuffer
 485               	.LVL47:
  95:proj2-1.c     ****          sprintf(buffer,"Battery Temperature: %u\n", sensors[SenTemp]);
 486               		.loc 1 95 0
 487 0264 8091 0000 		lds r24,sensors+21
 488 0268 1F92      		push __zero_reg__
 489 026a 8F93      		push r24
 490 026c 9F92      		push r9
 491 026e 8F92      		push r8
 492 0270 1F93      		push r17
 493 0272 0F93      		push r16
 494 0274 0E94 0000 		call sprintf
 495               	.LVL48:
  96:proj2-1.c     ****          printBuffer(buffer);
 496               		.loc 1 96 0
 497 0278 C801      		movw r24,r16
 498 027a 0E94 0000 		call printBuffer
 499               	.LVL49:
  98:proj2-1.c     ****             (uint16_t)((sensors[SenCharge1] << 8)| sensors[SenCharge0]));
 500               		.loc 1 98 0
 501 027e 8091 0000 		lds r24,sensors+22
 502 0282 90E0      		ldi r25,0
 503 0284 982F      		mov r25,r24
 504 0286 8827      		clr r24
 505 0288 2091 0000 		lds r18,sensors+23
 506 028c 822B      		or r24,r18
  97:proj2-1.c     ****          sprintf(buffer,"Battery Charge: %i\n", 
 507               		.loc 1 97 0
 508 028e 9F93      		push r25
 509 0290 8F93      		push r24
 510 0292 FF92      		push r15
 511 0294 EF92      		push r14
 512 0296 1F93      		push r17
 513 0298 0F93      		push r16
 514 029a 0E94 0000 		call sprintf
 515               	.LVL50:
  99:proj2-1.c     ****          printBuffer(buffer);
 516               		.loc 1 99 0
 517 029e C801      		movw r24,r16
 518 02a0 0E94 0000 		call printBuffer
 519               	.LVL51:
 101:proj2-1.c     ****             (uint16_t)((sensors[SenCap1] << 8)| sensors[SenCap0]));
 520               		.loc 1 101 0
 521 02a4 8091 0000 		lds r24,sensors+24
 522 02a8 90E0      		ldi r25,0
 523 02aa 982F      		mov r25,r24
 524 02ac 8827      		clr r24
 525 02ae 2091 0000 		lds r18,sensors+25
 526 02b2 822B      		or r24,r18
 100:proj2-1.c     ****          sprintf(buffer,"Battery Capacity: %i\n", 
 527               		.loc 1 100 0
 528 02b4 9F93      		push r25
 529 02b6 8F93      		push r24
 530 02b8 80E0      		ldi r24,lo8(.LC10)
 531 02ba 90E0      		ldi r25,hi8(.LC10)
 532 02bc 9F93      		push r25
 533 02be 8F93      		push r24
 534 02c0 1F93      		push r17
 535 02c2 0F93      		push r16
 536 02c4 0E94 0000 		call sprintf
 537               	.LVL52:
 102:proj2-1.c     ****          printBuffer(buffer);
 538               		.loc 1 102 0
 539 02c8 0FB6      		in __tmp_reg__,__SREG__
 540 02ca F894      		cli
 541 02cc DEBF      		out __SP_H__,r29
 542 02ce 0FBE      		out __SREG__,__tmp_reg__
 543 02d0 CDBF      		out __SP_L__,r28
 544 02d2 C801      		movw r24,r16
 545 02d4 0E94 0000 		call printBuffer
 546               	.LVL53:
 103:proj2-1.c     ****          sei();			
 547               		.loc 1 103 0
 548               	/* #APP */
 549               	 ;  103 "proj2-1.c" 1
 550 02d8 7894      		sei
 551               	 ;  0 "" 2
 104:proj2-1.c     ****          setSerialDestination(SERIAL_CREATE);
 552               		.loc 1 104 0
 553               	/* #NOAPP */
 554 02da 81E0      		ldi r24,lo8(1)
 555 02dc 0E94 0000 		call setSerialDestination
 556               	.LVL54:
 105:proj2-1.c     ****          canPrint=0;
 557               		.loc 1 105 0
 558 02e0 1092 0000 		sts canPrint,__zero_reg__
 559               	.L12:
 560               	.LBE5:
 107:proj2-1.c     ****       delayMs(15);
 561               		.loc 1 107 0
 562 02e4 8FE0      		ldi r24,lo8(15)
 563 02e6 90E0      		ldi r25,0
 564 02e8 0E94 0000 		call delayMs
 565               	.LVL55:
 108:proj2-1.c     ****       if(UserButtonPressed) {
 566               		.loc 1 108 0
 567 02ec 4C99      		sbic 0x9,4
 568 02ee 00C0      		rjmp .L14
 109:proj2-1.c     ****          powerOffRobot();
 569               		.loc 1 109 0
 570 02f0 0E94 0000 		call powerOffRobot
 571               	.LVL56:
 110:proj2-1.c     ****          exit(1);
 572               		.loc 1 110 0
 573 02f4 81E0      		ldi r24,lo8(1)
 574 02f6 90E0      		ldi r25,0
 575 02f8 0E94 0000 		call exit
 576               	.LVL57:
 577               		.cfi_endproc
 578               	.LFE1:
 580               		.comm	sensors,52,1
 581               		.text
 582               	.Letext0:
 583               		.file 2 "/usr/lib/avr/include/stdint.h"
 584               		.file 3 "timer.h"
 585               		.file 4 "cmod.h"
 586               		.file 5 "iroblib.h"
 587               		.file 6 "/usr/lib/avr/include/stdio.h"
 588               		.file 7 "/usr/lib/avr/include/stdlib.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 proj2-1.c
     /tmp/ccQqE8XX.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccQqE8XX.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccQqE8XX.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccQqE8XX.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccQqE8XX.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccQqE8XX.s:12     .text:0000000000000000 printBuffer
     /tmp/ccQqE8XX.s:108    .text.startup:0000000000000000 main
                            *COM*:0000000000000034 sensors

UNDEFINED SYMBOLS
byteTx
initializeCommandModule
powerOnRobot
baud
defineSongs
delayMs
canSense
byteRx
senseTimerCount
canPrint
setSerialDestination
sprintf
powerOffRobot
exit
__do_copy_data
__do_clear_bss
